package io.terminus.doctor.user.service;

import com.google.common.base.Throwables;
import io.terminus.common.model.Response;
import io.terminus.doctor.user.dao.DoctorServiceStatusDao;
import io.terminus.doctor.user.dto.DoctorServiceStatusDto;
import io.terminus.doctor.user.model.DoctorServiceStatus;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Code generated by terminus code gen
 * Desc: 用户服务状态表读服务实现类
 * Date: 2016-06-03
 */
@Slf4j
@Service
public class DoctorServiceStatusReadServiceImpl implements DoctorServiceStatusReadService {

    private final DoctorServiceStatusDao doctorServiceStatusDao;

    @Autowired
    public DoctorServiceStatusReadServiceImpl(DoctorServiceStatusDao doctorServiceStatusDao) {
        this.doctorServiceStatusDao = doctorServiceStatusDao;
    }

    @Override
    public Response<DoctorServiceStatus> findServiceStatusById(Long serviceStatusId) {
        try {
            return Response.ok(doctorServiceStatusDao.findById(serviceStatusId));
        } catch (Exception e) {
            log.error("find serviceStatus by id failed, serviceStatusId:{}, cause:{}", serviceStatusId, Throwables.getStackTraceAsString(e));
            return Response.fail("serviceStatus.find.fail");
        }
    }

    @Override
    public Response<DoctorServiceStatus> findByUserId(Long userId) {
        try {
            return Response.ok(doctorServiceStatusDao.findByUserId(userId));
        } catch (Exception e) {
            log.error("find serviceStatus by userId failed, userId:{}, cause:{}", userId, Throwables.getStackTraceAsString(e));
            return Response.fail("serviceStatus.find.fail");
        }
    }

    @Override
    public Response<DoctorServiceStatusDto> findDoctorServiceStatusDto(Long userId){
        try {
            DoctorServiceStatus status = doctorServiceStatusDao.findByUserId(userId);
            DoctorServiceStatusDto dto = this.makeDoctorServiceStatusDto(status);
            dto.setUserId(userId);
            return Response.ok(dto);
        } catch (Exception e) {
            log.error("find serviceStatus by userId failed, userId:{}, cause:{}", userId, Throwables.getStackTraceAsString(e));
            return Response.fail("serviceStatus.find.fail");
        }
    }

    private DoctorServiceStatusDto makeDoctorServiceStatusDto(DoctorServiceStatus status){
        DoctorServiceStatusDto dto = new DoctorServiceStatusDto();
        //审核不通过或冻结申请资格的原因
        dto.setPigDoctorReason(status.getPigdoctorReason());
        dto.setPigmallReason(status.getPigmallReason());
        dto.setNeverestReason(status.getNeverestReason());
        dto.setPigTradeReason(status.getPigtradeReason());

        //如果服务已开通,则设状态为1, 否则使用申请和审批的状态
        dto.setPigDoctor(status.getPigdoctorStatus() == 1 ? 1 : status.getPigdoctorReviewStatus());
        dto.setPigmall(status.getPigmallStatus() == 1 ? 1 : status.getPigmallReviewStatus());
        dto.setNeverest(status.getNeverestStatus() == 1 ? 1 : status.getNeverestReviewStatus());
        dto.setPigTrade(status.getPigtradeStatus() == 1 ? 1 : status.getPigtradeReviewStatus());
        return dto;
    }
}
