package io.terminus.doctor.msg.dao;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import io.terminus.common.model.Paging;
import io.terminus.common.mysql.dao.MyBatisDao;
import io.terminus.common.utils.JsonMapper;
import io.terminus.doctor.msg.model.DoctorMessage;
import org.springframework.stereotype.Repository;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Code generated by terminus code gen
 * Desc: 猪场软件消息表Dao类
 * Date: 2016-05-30
 * Author: chk@terminus.io
 */
@Repository
public class DoctorMessageDao extends MyBatisDao<DoctorMessage> {

    /**
     * 获取未读站内信的数量
     * @param userId    用户id
     * @return
     */
    public Long findNoReadCount(Long userId) {
        return getSqlSession().selectOne(sqlId("findNoReadCount"), userId);
    }

    /**
     * 获取系统消息(最新)
     * @param templateId    模板id
     * @return
     */
    public DoctorMessage findLatestSysMessage(Long templateId) {
        return getSqlSession().selectOne(sqlId("findLatestSysMessage"), templateId);
    }

    /**
     * 获取预警消息(最新)
     * @param templateId    模板id
     * @param farmId        猪场id
     * @param roleId        角色id
     * @return
     */
    public DoctorMessage findLatestWarnMessage(Long templateId, Long farmId, Long roleId) {
        return getSqlSession().selectOne(sqlId("findLatestWarnMessage"),
                ImmutableMap.of("templateId", templateId, "farmId", farmId, "roleId", roleId));
    }

    /**
     * 获取预警消息(最新)
     * @param templateId    模板id
     * @param farmId        猪场id
     * @return
     */
    public DoctorMessage findLatestWarnMessage(Long templateId, Long farmId) {
        return getSqlSession().selectOne(sqlId("findLatestWarnMessage2"),
                ImmutableMap.of("templateId", templateId, "farmId", farmId));
    }

    /**
     * 根据条件获取businessId列表
     * @param criteria
     * @return
     */
    public List<Long> findBusinessListByCriteria(Map<String, Object> criteria){
        return getSqlSession().selectList(sqlId("businessList"), criteria);
    }

    /**
     * 分页过滤消息
     * @param criteria
     * @param offset
     * @param limit
     * @return
     */
    public Paging<DoctorMessage> pagingDiffBusinessId(Map<String, Object> criteria, Integer offset, Integer limit){
        HashMap params = Maps.newHashMap();
        if(criteria != null) {
            Map total = (Map) JsonMapper.nonDefaultMapper().getMapper().convertValue(criteria, Map.class);
            params.putAll(total);
        }
        Long total = (long)getSqlSession().selectList(sqlId("businessList"), criteria).size();
        if(total.longValue() <= 0L) {
            return new Paging(Long.valueOf(0L), Collections.emptyList());
        } else {
            params.put("offset", offset);
            params.put("limit", limit);
            List datas = this.sqlSession.selectList(this.sqlId("pagingDiffBusinessId"), params);
            return new Paging(total, datas);
        }
    }

}
