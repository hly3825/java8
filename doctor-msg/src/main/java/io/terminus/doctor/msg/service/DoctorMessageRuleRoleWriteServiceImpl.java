package io.terminus.doctor.msg.service;

import com.google.common.base.Throwables;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import io.terminus.doctor.msg.dao.DoctorMessageRuleDao;
import io.terminus.doctor.msg.dao.DoctorMessageRuleRoleDao;
import io.terminus.doctor.msg.model.DoctorMessageRule;
import io.terminus.doctor.msg.model.DoctorMessageRuleRole;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

/**
 * Code generated by terminus code gen
 * Desc: 猪场软件消息规则与角色表写服务实现类
 * Date: 2016-05-31
 * Author: chk@terminus.io
 */
@Slf4j
@Service
@RpcProvider
public class DoctorMessageRuleRoleWriteServiceImpl implements DoctorMessageRuleRoleWriteService {

    private final DoctorMessageRuleRoleDao doctorMessageRuleRoleDao;
    private final DoctorMessageRuleDao doctorMessageRuleDao;

    @Autowired
    public DoctorMessageRuleRoleWriteServiceImpl(DoctorMessageRuleRoleDao doctorMessageRuleRoleDao,
                                                 DoctorMessageRuleDao doctorMessageRuleDao) {
        this.doctorMessageRuleRoleDao = doctorMessageRuleRoleDao;
        this.doctorMessageRuleDao = doctorMessageRuleDao;
    }

    @Override
    public Response<Long> createMessageRuleRole(DoctorMessageRuleRole messageRuleRole) {
        try {
            doctorMessageRuleRoleDao.create(messageRuleRole);
            return Response.ok(messageRuleRole.getId());
        } catch (Exception e) {
            log.error("create messageRuleRole failed, messageRuleRole:{}, cause:{}", messageRuleRole, Throwables.getStackTraceAsString(e));
            return Response.fail("messageRuleRole.create.fail");
        }
    }

    @Override
    public Response<Boolean> updateMessageRuleRole(DoctorMessageRuleRole messageRuleRole) {
        try {
            return Response.ok(doctorMessageRuleRoleDao.update(messageRuleRole));
        } catch (Exception e) {
            log.error("update messageRuleRole failed, messageRuleRole:{}, cause:{}", messageRuleRole, Throwables.getStackTraceAsString(e));
            return Response.fail("messageRuleRole.update.fail");
        }
    }

    @Override
    public Response<Boolean> deleteMessageRuleRoleById(Long messageRuleRoleId) {
        try {
            return Response.ok(doctorMessageRuleRoleDao.delete(messageRuleRoleId));
        } catch (Exception e) {
            log.error("delete messageRuleRole failed, messageRuleRoleId:{}, cause:{}", messageRuleRoleId, Throwables.getStackTraceAsString(e));
            return Response.fail("messageRuleRole.delete.fail");
        }
    }

    @SuppressWarnings("all")
    @Override
    public Response<Boolean> relateRuleRolesByRuleId(Long ruleId, List<Long> roleIds) {
        try {
            // 查询出于ruleId关联的所有角色
            DoctorMessageRule rule = doctorMessageRuleDao.findById(ruleId);
            List<Long> dbRoleIds = doctorMessageRuleRoleDao.findByRuleId(ruleId)
                    .stream()
                    .map(DoctorMessageRuleRole::getRoleId)
                    .collect(Collectors.toList());

            // 1. 删除关系
            for (int i = 0; dbRoleIds != null && i < dbRoleIds.size(); i++) {
                Long roleId = dbRoleIds.get(i);
                if (roleIds == null || !roleIds.contains(roleId)) {
                    DoctorMessageRuleRole ruleRole = doctorMessageRuleRoleDao.findByRuleAndRoleId(ruleId, roleId);
                    if (ruleRole != null) {
                        doctorMessageRuleRoleDao.delete(ruleRole.getId());
                    }
                }
            }

            // 2. 创建关系
            for (int i = 0; roleIds != null && i < roleIds.size(); i++) {
                Long roleId = roleIds.get(i);
                if (dbRoleIds == null || !dbRoleIds.contains(roleId)) {
                    DoctorMessageRuleRole ruleRole = DoctorMessageRuleRole.builder()
                            .templateId(rule.getTemplateId())
                            .farmId(rule.getFarmId())
                            .ruleValue(rule.getRuleValue())
                            .useDefault(1) // 使用默认值配置
                            .ruleId(ruleId)
                            .roleId(roleId)
                            .build();
                    doctorMessageRuleRoleDao.create(ruleRole);
                }
            }
            return Response.ok(Boolean.TRUE);
        } catch (Exception e) {
            log.error("relate rule for roleIds failed, ruleId:{}, roleIds:{}, cause by {}",
                    ruleId, roleIds, Throwables.getStackTraceAsString(e));
            return Response.fail("relate.rule.role.fail");
        }
    }

    @SuppressWarnings("all")
    @Override
    public Response<Boolean> relateRuleRolesByRoleId(Long roleId, List<Long> ruleIds) {
        try {

            List<Long> dbRuleIds = doctorMessageRuleRoleDao.findByRoleId(roleId)
                    .stream()
                    .map(DoctorMessageRuleRole::getRuleId)
                    .collect(Collectors.toList());

            // 1. 删除关系
            for (int i = 0; dbRuleIds != null && i < dbRuleIds.size(); i++) {
                Long dbRuleId = dbRuleIds.get(i);
                if (ruleIds == null || !ruleIds.contains(dbRuleId)) {
                    DoctorMessageRuleRole ruleRole = doctorMessageRuleRoleDao.findByRuleAndRoleId(dbRuleId, roleId);
                    if (ruleRole != null) {
                        doctorMessageRuleRoleDao.delete(ruleRole.getId());
                    }
                }
            }

            // 2. 创建关系
            for (int i = 0; ruleIds != null && i < ruleIds.size(); i++) {
                Long ruleId = ruleIds.get(i);
                if (dbRuleIds == null || !dbRuleIds.contains(ruleId)) {
                    DoctorMessageRule rule = doctorMessageRuleDao.findById(ruleId);
                    DoctorMessageRuleRole ruleRole = DoctorMessageRuleRole.builder()
                            .templateId(rule.getTemplateId())
                            .farmId(rule.getFarmId())
                            .ruleValue(rule.getRuleValue())
                            .useDefault(1) // 使用默认值配置
                            .ruleId(ruleId)
                            .roleId(roleId)
                            .build();
                    doctorMessageRuleRoleDao.create(ruleRole);
                }
            }
            return Response.ok(Boolean.TRUE);
        } catch (Exception e) {
            log.error("relate rule for roleId failed, roleId:{}, ruleIds:{}, cause by {}",
                    roleId, ruleIds, Throwables.getStackTraceAsString(e));
            return Response.fail("relate.rule.role.fail");
        }
    }
}
