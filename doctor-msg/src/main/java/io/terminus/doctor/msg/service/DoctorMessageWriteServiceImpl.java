package io.terminus.doctor.msg.service;

import com.google.common.base.Throwables;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import io.terminus.doctor.msg.dao.DoctorMessageDao;
import io.terminus.doctor.msg.model.DoctorMessage;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Code generated by terminus code gen
 * Desc: 猪场软件消息表写服务实现类
 * Date: 2016-05-31
 */
@Slf4j
@Service
@RpcProvider
public class DoctorMessageWriteServiceImpl implements DoctorMessageWriteService {

    private final DoctorMessageDao doctorMessageDao;

    @Autowired
    public DoctorMessageWriteServiceImpl(DoctorMessageDao doctorMessageDao) {
        this.doctorMessageDao = doctorMessageDao;
    }

    @Override
    public Response<Long> createMessage(DoctorMessage message) {
        try {
            doctorMessageDao.create(message);
            return Response.ok(message.getId());
        } catch (Exception e) {
            log.error("create message failed, message:{}, cause:{}", message, Throwables.getStackTraceAsString(e));
            return Response.fail("message.create.fail");
        }
    }

    @Override
    public Response<Boolean> createMessages(List<DoctorMessage> messages) {
        try{
            doctorMessageDao.creates(messages);
            return Response.ok(Boolean.TRUE);
        } catch (Exception e) {
            log.error("create messages failed, cause:{}", Throwables.getStackTraceAsString(e));
            return Response.fail("message.create.fail");
        }
    }

    @Override
    public Response<Boolean> updateMessage(DoctorMessage message) {
        try {
            return Response.ok(doctorMessageDao.update(message));
        } catch (Exception e) {
            log.error("update message failed, message:{}, cause:{}", message, Throwables.getStackTraceAsString(e));
            return Response.fail("message.update.fail");
        }
    }

    @Override
    public Response<Boolean> deleteMessageById(Long messageId) {
        try {
            DoctorMessage message = doctorMessageDao.findById(messageId);
            if (message != null) {
                // 逻辑删除
                //message.setStatus(DoctorMessage.Status.DELETE.getValue());
                return Response.ok(doctorMessageDao.update(message));
            }
            return Response.ok(Boolean.TRUE);
        } catch (Exception e) {
            log.error("delete message failed, messageId:{}, cause:{}", messageId, Throwables.getStackTraceAsString(e));
            return Response.fail("message.delete.fail");
        }
    }
}
