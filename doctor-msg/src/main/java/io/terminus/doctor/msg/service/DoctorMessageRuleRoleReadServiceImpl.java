package io.terminus.doctor.msg.service;

import com.google.common.base.Throwables;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import io.terminus.doctor.msg.dao.DoctorMessageRuleRoleDao;
import io.terminus.doctor.msg.model.DoctorMessageRuleRole;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Code generated by terminus code gen
 * Desc: 猪场软件消息规则与角色表读服务实现类
 * Date: 2016-05-31
 * Author: chk@terminus.io
 */
@Slf4j
@Service
@RpcProvider
public class DoctorMessageRuleRoleReadServiceImpl implements DoctorMessageRuleRoleReadService {

    private final DoctorMessageRuleRoleDao doctorMessageRuleRoleDao;

    @Autowired
    public DoctorMessageRuleRoleReadServiceImpl(DoctorMessageRuleRoleDao doctorMessageRuleRoleDao) {
        this.doctorMessageRuleRoleDao = doctorMessageRuleRoleDao;
    }

    @Override
    public Response<DoctorMessageRuleRole> findMessageRuleRoleById(Long messageRuleRoleId) {
        try {
            return Response.ok(doctorMessageRuleRoleDao.findById(messageRuleRoleId));
        } catch (Exception e) {
            log.error("find messageRuleRole by id failed, messageRuleRoleId:{}, cause:{}", messageRuleRoleId, Throwables.getStackTraceAsString(e));
            return Response.fail("messageRuleRole.find.fail");
        }
    }

    @Override
    public Response<List<DoctorMessageRuleRole>> findByTplId(Long tplId) {
        try{
            return Response.ok(doctorMessageRuleRoleDao.findByTplId(tplId));
        } catch (Exception e) {
            log.error("find messageRuleRole by tplId failed, tplId:{}, cause:{}", tplId, Throwables.getStackTraceAsString(e));
            return Response.fail("messageRuleRole.find.fail");
        }
    }

    @Override
    public Response<List<DoctorMessageRuleRole>> findByTplAndFarmId(Long templateId, Long farmId) {
        try{
            return Response.ok(doctorMessageRuleRoleDao.findByTplAndFarmId(templateId, farmId));
        } catch (Exception e) {
            log.error("find messageRuleRole by tplId and farmId failed, tplId:{}, farmId:{}, cause by {}",
                    templateId, farmId, Throwables.getStackTraceAsString(e));
            return Response.fail("messageRuleRole.find.fail");
        }
    }

    @Override
    public Response<List<DoctorMessageRuleRole>> findByRuleId(Long ruleId) {
        try{
            return Response.ok(doctorMessageRuleRoleDao.findByRuleId(ruleId));
        } catch (Exception e) {
            log.error("find messageRuleRole by ruleId failed, ruleId:{}, cause by {}", ruleId, Throwables.getStackTraceAsString(e));
            return Response.fail("messageRuleRole.find.fail");
        }
    }

    @Override
    public Response<List<DoctorMessageRuleRole>> findByRoleId(Long roleId) {
        try{
            return Response.ok(doctorMessageRuleRoleDao.findByRoleId(roleId));
        } catch (Exception e) {
            log.error("find messageRuleRole by roleId failed, ruleId:{}, cause by {}", roleId, Throwables.getStackTraceAsString(e));
            return Response.fail("messageRuleRole.find.fail");
        }
    }
}
