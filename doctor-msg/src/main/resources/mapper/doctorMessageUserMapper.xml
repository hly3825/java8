<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (c) 2016 杭州端点网络科技有限公司, Code generated by terminus code gen
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="DoctorMessageUser">
    <resultMap id="DoctorMessageUserMap" type="DoctorMessageUser">
        <id column="id" property="id"/>
        <result column="farm_id" property="farmId"/>
        <result column="template_id" property="templateId"/>
        <result column="user_id" property="userId"/>
        <result column="message_id" property="messageId"/>
        <result column="business_id" property="businessId"/>
        <result column="status" property="status"/>
        <result column="sended_at" property="sendedAt"/>
        <result column="failed_by" property="failedBy"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
    </resultMap>

    <sql id="tb">
        doctor_message_user
    </sql>

    <sql id="cols_all">
        id, <include refid="cols_exclude_id" />
    </sql>

    <sql id="cols_exclude_id">
       farm_id, template_id, user_id, message_id, business_id, status, sended_at, failed_by, created_at, updated_at
    </sql>

    <sql id="vals">
        #{farmId}, #{templateId}, #{userId}, #{messageId}, #{businessId},  #{status}, #{sendedAt}, #{failedBy}, now(), now()
    </sql>

    <insert id="create" parameterType="DoctorMessageUser" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO
        <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        (<include refid="vals" />)
    </insert>

    <insert id="creates" parameterType="list">
        INSERT INTO
        <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        <foreach collection="list" item="i" separator=",">
            #{i.farmId}, #{i.templateId}, #{i.userId}, #{i.messageId}, #{i.businessId}, #{i.status}, #{i.sendedAt}, #{i.failedBy}, now(), now())
        </foreach>
    </insert>

    <select id="findById" parameterType="long" resultMap="DoctorMessageUserMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE id = #{id}
    </select>

    <update id="update" parameterType="DoctorMessageUser">
        UPDATE
        <include refid="tb"/>
        <set>
            <if test="farmId != null">farm_id = #{farmId},</if>
            <if test="templateId != null">template_id = #{templateId},</if>
            <if test="userId != null">user_id = #{userId},</if>
            <if test="messageId != null">message_id = #{messageId},</if>
            <if test="businessId != null">business_id = #{businessId},</if>
            <if test="status != null">status = #{status},</if>
            <if test="sendedAt != null">sended_at = #{sendedAt},</if>
            <if test="failedBy != null">failed_by = #{failedBy},</if>
            updated_at=now()
        </set>
        WHERE id = #{id}
    </update>

    <delete id="delete" parameterType="long">
        DELETE FROM <include refid="tb"/>
        WHERE id = #{id}
    </delete>

    <sql id="criteria">
        <where>
            1=1
            <if test="farmId != null">AND farm_id = #{farmId}</if>
            <if test="templateId != null">AND template_id = #{templateId}</if>
            <if test="userId != null">AND user_id = #{userId}</if>
            <if test="messageId != null">AND message_id = #{messageId}</if>
            <if test="businessId != null">AND business_id = #{businessId}</if>
            <if test="status != null">AND status = #{status}</if>
            <if test="statuses != null &amp;&amp; statuses.size() > 0">
                AND `status` IN
                <foreach collection="statuses" item="i" open="(" separator="," close=")">
                    #{i}
                </foreach>
            </if>
        </where>
    </sql>

    <select id="list" parameterType="map" resultMap="DoctorMessageUserMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        <include refid="criteria"/>
    </select>

    <select id="count" parameterType="map" resultType="long">
        SELECT COUNT(1)
        FROM <include refid="tb"/>
        <include refid="criteria"/>
    </select>

    <select id="paging" parameterType="map" resultMap="DoctorMessageUserMap">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        <include refid="criteria"/>
        order by `status` asc, `id` desc -- 未读排在前面, 其次最新
        LIMIT #{offset}, #{limit}
    </select>

    <select id="findMessageIdsByUserId" parameterType="long" resultType="long">
        SELECT message_id
        FROM <include refid="tb"/>
        <include refid="criteria"/>
        order by `status` asc, `id` desc -- 未读排在前面, 其次最新
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 获取未读站内信的数量 -->
    <select id="findNoReadCount" parameterType="long" resultType="long">
        SELECT COUNT(1)
        FROM <include refid="tb"/>
        WHERE user_id = #{userId} AND status = 1
    </select>

    <select id="businessIdList" parameterType="map" resultType="long">
        SELECT DISTINCT business_id
        FROM <include refid="tb"/>
        <include refid="criteria"/>
    </select>

    <delete id="deleteByMessageId" parameterType="long" >
        DELETE
        FROM <include refid="tb"/>
        WHERE message_id = #{messageId}
    </delete>

</mapper>