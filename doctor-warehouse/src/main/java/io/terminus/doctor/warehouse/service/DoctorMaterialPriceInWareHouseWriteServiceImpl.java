package io.terminus.doctor.warehouse.service;

import com.google.common.base.Throwables;
import io.terminus.common.model.Response;
import io.terminus.doctor.warehouse.dao.DoctorMaterialPriceInWareHouseDao;
import io.terminus.doctor.warehouse.model.DoctorMaterialPriceInWareHouse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Code generated by terminus code gen
 * Desc: 仓库中各物料每次入库的剩余量写服务实现类
 * Date: 2016-08-15
 */
@Slf4j
@Service
public class DoctorMaterialPriceInWareHouseWriteServiceImpl implements DoctorMaterialPriceInWareHouseWriteService {

    private final DoctorMaterialPriceInWareHouseDao doctorMaterialPriceInWareHouseDao;

    @Autowired
    public DoctorMaterialPriceInWareHouseWriteServiceImpl(DoctorMaterialPriceInWareHouseDao doctorMaterialPriceInWareHouseDao) {
        this.doctorMaterialPriceInWareHouseDao = doctorMaterialPriceInWareHouseDao;
    }

    @Override
    public Response<Long> createMaterialPriceInWareHouse(DoctorMaterialPriceInWareHouse materialPriceInWareHouse) {
        try {
            doctorMaterialPriceInWareHouseDao.create(materialPriceInWareHouse);
            return Response.ok(materialPriceInWareHouse.getId());
        } catch (Exception e) {
            log.error("create materialPriceInWareHouse failed, materialPriceInWareHouse:{}, cause:{}", materialPriceInWareHouse, Throwables.getStackTraceAsString(e));
            return Response.fail("materialPriceInWareHouse.create.fail");
        }
    }

    @Override
    public Response<Boolean> updateMaterialPriceInWareHouse(DoctorMaterialPriceInWareHouse materialPriceInWareHouse) {
        try {
            return Response.ok(doctorMaterialPriceInWareHouseDao.update(materialPriceInWareHouse));
        } catch (Exception e) {
            log.error("update materialPriceInWareHouse failed, materialPriceInWareHouse:{}, cause:{}", materialPriceInWareHouse, Throwables.getStackTraceAsString(e));
            return Response.fail("materialPriceInWareHouse.update.fail");
        }
    }

    @Override
    public Response<Boolean> deleteMaterialPriceInWareHouseById(Long materialPriceInWareHouseId) {
        try {
            return Response.ok(doctorMaterialPriceInWareHouseDao.delete(materialPriceInWareHouseId));
        } catch (Exception e) {
            log.error("delete materialPriceInWareHouse failed, materialPriceInWareHouseId:{}, cause:{}", materialPriceInWareHouseId, Throwables.getStackTraceAsString(e));
            return Response.fail("materialPriceInWareHouse.delete.fail");
        }
    }
}
