<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (c) 2016 杭州端点网络科技有限公司, Code generated by terminus code gen
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="DoctorGroupInfoCheck">
    <resultMap id="DoctorGroupInfoCheckMap" type="DoctorGroupInfoCheck">
        <id column="id" property="id"/>
        <result column="farm_id" property="farmId"/>
        <result column="farm_name" property="farmName"/>
        <result column="group_id" property="groupId"/>
        <result column="group_code" property="groupCode"/>
        <result column="event_count" property="eventCount"/>
        <result column="track_count" property="trackCount"/>
        <result column="sum_at" property="sumAt"/>
        <result column="status" property="status"/>
        <result column="extra" property="extra"/>
        <result column="remark" property="remark"/>
        <result column="created_at" property="createdAt"/>
        <result column="creator_id" property="creatorId"/>
        <result column="creator_name" property="creatorName"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="updator_id" property="updatorId"/>
        <result column="updator_name" property="updatorName"/>
        
    </resultMap>

    <sql id="tb">
        doctor_group_info_checks
    </sql>

    <sql id="cols_all">
        id, <include refid="cols_exclude_id" />
    </sql>

    <sql id="cols_exclude_id">
        farm_id, 
        farm_name, 
        group_id, 
        group_code, 
        event_count, 
        track_count, 
        sum_at, 
        status, 
        extra, 
        remark, 
        created_at, 
        creator_id, 
        creator_name, 
        updated_at, 
        updator_id, 
        updator_name
        
    </sql>

    <sql id="vals">
        #{farmId}, 
        #{farmName}, 
        #{groupId}, 
        #{groupCode}, 
        #{eventCount}, 
        #{trackCount}, 
        #{sumAt}, 
        #{status}, 
        #{extra}, 
        #{remark}, 
        now(), 
        #{creatorId}, 
        #{creatorName}, 
        now(), 
        #{updatorId}, 
        #{updatorName}
        
    </sql>

    <sql id="criteria">
        <if test="id != null">AND id = #{id}</if>
        <if test="farmId != null">AND farm_id = #{farmId}</if>
        <if test="farmName != null">AND farm_name = #{farmName}</if>
        <if test="groupId != null">AND group_id = #{groupId}</if>
        <if test="groupCode != null">AND group_code = #{groupCode}</if>
        <if test="eventCount != null">AND event_count = #{eventCount}</if>
        <if test="trackCount != null">AND track_count = #{trackCount}</if>
        <if test="sumAt != null">AND sum_at = #{sumAt}</if>
        <if test="status != null">AND status = #{status}</if>
        <if test="extra != null">AND extra = #{extra}</if>
        <if test="remark != null">AND remark = #{remark}</if>
        
        <if test="creatorId != null">AND creator_id = #{creatorId}</if>
        <if test="creatorName != null">AND creator_name = #{creatorName}</if>
        
        <if test="updatorId != null">AND updator_id = #{updatorId}</if>
        <if test="updatorName != null">AND updator_name = #{updatorName}</if>
        
    </sql>

    <insert id="create" parameterType="DoctorGroupInfoCheck" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        (<include refid="vals" />)
    </insert>

    <insert id="creates" parameterType="list">
        INSERT INTO <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        <foreach collection="list" separator="," item="item">
            (
                #{item.farmId},
                #{item.farmName},
                #{item.groupId},
                #{item.groupCode},
                #{item.eventCount},
                #{item.trackCount},
                now(),
                #{item.status},
                #{item.extra},
                #{item.remark},
                now(),
                #{item.creatorId},
                #{item.creatorName},
                now(),
                #{item.updatorId},
                #{item.updatorName}
            )
        </foreach>
    </insert>



    <select id="findById" parameterType="long" resultMap="DoctorGroupInfoCheckMap" >
        SELECT <include refid="cols_all" /> FROM <include refid="tb" />
        WHERE id = #{id}
    </select>

    <update id="update" parameterType="DoctorGroupInfoCheck">
        UPDATE <include refid="tb"/>
        <set>
            <if test="farmId != null">farm_id = #{farmId},</if>
            <if test="farmName != null">farm_name = #{farmName},</if>
            <if test="groupId != null">group_id = #{groupId},</if>
            <if test="groupCode != null">group_code = #{groupCode},</if>
            <if test="eventCount != null">event_count = #{eventCount},</if>
            <if test="trackCount != null">track_count = #{trackCount},</if>
            <if test="sumAt != null">sum_at = #{sumAt},</if>
            <if test="status != null">status = #{status},</if>
            <if test="extra != null">extra = #{extra},</if>
            <if test="remark != null">remark = #{remark},</if>
            
            <if test="creatorId != null">creator_id = #{creatorId},</if>
            <if test="creatorName != null">creator_name = #{creatorName},</if>
            
            <if test="updatorId != null">updator_id = #{updatorId},</if>
            <if test="updatorName != null">updator_name = #{updatorName},</if>
            
            updated_at=now()
        </set>
        WHERE id = #{id}
    </update>

    <delete id="delete" parameterType="long">
        DELETE FROM <include refid="tb"/>
        WHERE id = #{id}
    </delete>

    <select id="list" parameterType="map" resultMap="DoctorGroupInfoCheckMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <select id="count" parameterType="map" resultType="long">
        SELECT count(1) FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <select id="paging" parameterType="map" resultMap="DoctorGroupInfoCheckMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
        LIMIT #{offset}, #{limit}
    </select>

    <select id="checkGroupData" parameterType="map" resultMap="DoctorGroupInfoCheckMap">
        select t11.farm_id,
               t11.farm_name,
               t11.group_id,
               t11.group_code,
               t11.track_count,
               t12.event_count,
               case when t11.track_count = t12.event_count then 1 else -1 end as status,
               now() as sum_at
        from
        (
        select t1.farm_id, t1.farm_name, t2.group_id, t1.group_code, t2.quantity as track_count
        from doctor_groups t1 , doctor_group_tracks t2
        where t1.id = t2.group_id
        <if test="farmId != null">and t1.farm_id = #{farmId}</if>
        ) t11,
        (
        select group_id,
          ifnull(
            sum(
              CASE WHEN TYPE = 2 THEN quantity ELSE 0 END -
              CASE WHEN TYPE IN (3, 4, 9) THEN quantity ELSE 0 END -
              CASE WHEN TYPE = 5 THEN 1 ELSE 0 END
            )
          ,0) as event_count
        from doctor_group_events
        where type in(2,3,4,5,9)
        <if test="farmId != null">and farm_id = #{farmId}</if>
        group by group_id
        ) t12
        where t11.group_id = t12.group_id
        order by t11.farm_id, t11.group_id
        LIMIT #{offset}, #{limit}
    </select>

    <delete id="deletebyFarmIdAndSumAt" parameterType="map">
        DELETE FROM <include refid="tb"/>
        WHERE farm_id = #{farmId}
          AND sum_at = #{sumAt}
    </delete>

</mapper>