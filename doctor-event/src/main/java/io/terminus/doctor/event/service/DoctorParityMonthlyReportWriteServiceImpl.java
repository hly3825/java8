package io.terminus.doctor.event.service;

import com.google.common.base.Throwables;
import io.terminus.common.model.Response;
import io.terminus.common.utils.Dates;
import io.terminus.doctor.event.dao.DoctorParityMonthlyReportDao;
import io.terminus.doctor.event.manager.DoctorMonthlyReportManager;
import io.terminus.doctor.event.manager.DoctorParityMonthlyReportManager;
import io.terminus.doctor.event.model.DoctorMonthlyReport;
import io.terminus.doctor.event.model.DoctorParityMonthlyReport;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections.FastArrayList;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Code generated by terminus code gen
 * Desc: 胎次产仔分析月报写服务实现类
 * Date: 2016-09-13
 */
@Slf4j
@Service
public class DoctorParityMonthlyReportWriteServiceImpl implements DoctorParityMonthlyReportWriteService {

    private final DoctorParityMonthlyReportDao doctorParityMonthlyReportDao;
    private final DoctorParityMonthlyReportManager doctorParityMonthlyReportManager;

    @Autowired
    public DoctorParityMonthlyReportWriteServiceImpl(DoctorParityMonthlyReportDao doctorParityMonthlyReportDao,
                                                     DoctorParityMonthlyReportManager doctorParityMonthlyReportManager) {
        this.doctorParityMonthlyReportDao = doctorParityMonthlyReportDao;
        this.doctorParityMonthlyReportManager = doctorParityMonthlyReportManager;
    }

    @Override
    public Response<Long> createDoctorParityMonthlyReport(DoctorParityMonthlyReport doctorParityMonthlyReport) {
        try {
            doctorParityMonthlyReportDao.create(doctorParityMonthlyReport);
            return Response.ok(doctorParityMonthlyReport.getId());
        } catch (Exception e) {
            log.error("create doctorParityMonthlyReport failed, doctorParityMonthlyReport:{}, cause:{}", doctorParityMonthlyReport, Throwables.getStackTraceAsString(e));
            return Response.fail("doctorParityMonthlyReport.create.fail");
        }
    }

    @Override
    public Response<Boolean> updateDoctorParityMonthlyReport(DoctorParityMonthlyReport doctorParityMonthlyReport) {
        try {
            return Response.ok(doctorParityMonthlyReportDao.update(doctorParityMonthlyReport));
        } catch (Exception e) {
            log.error("update doctorParityMonthlyReport failed, doctorParityMonthlyReport:{}, cause:{}", doctorParityMonthlyReport, Throwables.getStackTraceAsString(e));
            return Response.fail("doctorParityMonthlyReport.update.fail");
        }
    }

    @Override
    public Response<Boolean> deleteDoctorParityMonthlyReportById(Long doctorParityMonthlyReportId) {
        try {
            return Response.ok(doctorParityMonthlyReportDao.delete(doctorParityMonthlyReportId));
        } catch (Exception e) {
            log.error("delete doctorParityMonthlyReport failed, doctorParityMonthlyReportId:{}, cause:{}", doctorParityMonthlyReportId, Throwables.getStackTraceAsString(e));
            return Response.fail("doctorParityMonthlyReport.delete.fail");
        }
    }

    @Override
    public Response<Boolean> createMonthlyReports(List<Long> farmIds, Date sumAt) {
        try {
            Date startAt = new DateTime(sumAt).withDayOfMonth(1).withTimeAtStartOfDay().toDate(); //月初: 2016-08-01 00:00:00
            Date endAt = new DateTime(Dates.endOfDay(sumAt)).plusSeconds(-1).toDate();            //天末: 2016-08-12 23:59:59
            farmIds.stream().forEach(farmId -> getMonthlyReport(farmId, startAt, endAt, sumAt));

            return Response.ok(Boolean.TRUE);
        } catch (Exception e) {
            log.error("create monthly reports failed, sumAt:{}, cause:{}", sumAt, Throwables.getStackTraceAsString(e));
            return Response.fail("monthlyReport.create.fail");
        }
    }
    @Override
    public Response<Boolean> createMonthlyReport(Long farmId, Date sumAt) {
        try {
            Date startAt = new DateTime(sumAt).withDayOfMonth(1).withTimeAtStartOfDay().toDate(); //月初: 2016-08-01 00:00:00
            Date endAt = new DateTime(Dates.endOfDay(sumAt)).plusSeconds(-1).toDate();            //天末: 2016-08-12 23:59:59
            getMonthlyReport(farmId, startAt, endAt, sumAt);
            return Response.ok(Boolean.TRUE);
        } catch (Exception e) {
            log.error("create monthly reports failed, sumAt:{}, cause:{}", sumAt, Throwables.getStackTraceAsString(e));
            return Response.fail("monthlyReport.create.fail");
        }
    }

    //月报
    private void getMonthlyReport(Long farmId, Date startAt, Date endAt, Date sumAt) {
        List<DoctorParityMonthlyReport> doctorParityMonthlyReportList = new ArrayList<>();
        //1,2,3,4,5,6,7,8,9,10胎及以上
        for(int i =0; i< 10; i++){
            List<DoctorParityMonthlyReport> result = doctorParityMonthlyReportDao.constructDoctorParityMonthlyReports(farmId, i, i, startAt, endAt);
            doctorParityMonthlyReportList.addAll(result);
        }
        List<DoctorParityMonthlyReport> result = doctorParityMonthlyReportDao.constructDoctorParityMonthlyReports(farmId, 10, null, startAt, endAt);
        doctorParityMonthlyReportList.addAll(result);
        if( doctorParityMonthlyReportList != null && !doctorParityMonthlyReportList.isEmpty()){
            doctorParityMonthlyReportManager.createMonthlyReports(doctorParityMonthlyReportList, sumAt);
        }

    }
}
