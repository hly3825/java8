package io.terminus.doctor.event.dao;

import com.google.common.collect.ImmutableMap;
import io.terminus.common.mysql.dao.MyBatisDao;
import io.terminus.common.utils.MapBuilder;
import io.terminus.doctor.common.utils.DateUtil;
import io.terminus.doctor.event.model.DoctorDailyReport;
import io.terminus.doctor.event.model.DoctorDailyReportSum;
import org.springframework.stereotype.Repository;

import java.util.Date;
import java.util.List;

/**
 * Code generated by terminus code gen
 * Desc: 日报Dao类
 * Date: 2017-04-19
 */
@Repository
public class DoctorDailyReportDao extends MyBatisDao<DoctorDailyReport> {

    public DoctorDailyReport findByFarmIdAndSumAt(Long farmId, Date date) {
        return findByFarmIdAndSumAt(farmId, DateUtil.toDateString(date));
    }

    public DoctorDailyReport findByFarmIdAndSumAt(Long farmId, String date) {
        return getSqlSession().selectOne(sqlId("findByFarmIdAndSumAt"), ImmutableMap.of("farmId", farmId, "sumAt", date));
    }

    public void deleteByFarmIdAndSumAt(Long farmId, Date sumAt) {
        deleteByFarmIdAndSumAt(farmId, DateUtil.toDateString(sumAt));
    }

    public void deleteByFarmIdAndSumAt(Long farmId, String sumAt) {
        getSqlSession().delete(sqlId("deleteByFarmIdAndSumAt"), ImmutableMap.of("farmId", farmId, "sumAt", sumAt));
    }

    public DoctorDailyReportSum findDailyReportSum(Long farmId, Date startAt, Date endAt) {
        return findDailyReportSum(farmId, DateUtil.toDateString(startAt), DateUtil.toDateString(endAt));
    }

    public DoctorDailyReportSum findDailyReportSum(Long farmId, String startAt, String endAt) {
        return getSqlSession().selectOne(sqlId("findDailyReportSum"), ImmutableMap.of("farmId", farmId, "startAt", startAt, "endAt", endAt));
    }


    public List<DoctorDailyReport> findBySumAt(Date sumAt) {
        return getSqlSession().selectList(sqlId("findBySumAt"), ImmutableMap.of("sumAt", DateUtil.toDateString(sumAt)));
    }

    public List<DoctorDailyReport> findByRange(Long farmId, Date startAt, Date endAt) {
        return getSqlSession().selectList(sqlId("findByRange"), ImmutableMap.of("farmId", farmId, "startAt", DateUtil.toDateString(startAt), "endAt", DateUtil.toDateString(endAt)));
    }

    /**
     * 更新日期之后每日母猪存栏
     * @param farmId 猪群id
     * @param sumAt 日期
     * @param liveChangeCount 存栏变动数量
     * @param phChangeCount 配怀舍存栏变化
     * @param cfChangeCount 产房存栏变化
     *
     */
    public void updateDailySowPigLiveStock(Long farmId, Date sumAt, Integer liveChangeCount, Integer phChangeCount, Integer cfChangeCount) {
        getSqlSession().update(sqlId("updateDailySowPigLiveStock"),
                MapBuilder.of().put("farmId", farmId).put("sumAt", DateUtil.toDateString(sumAt)).put("liveChangeCount", liveChangeCount).put("phChangeCount", phChangeCount).put("cfChangeCount", cfChangeCount).map());
    }

    /**
     * 更新日期之后每日公猪存栏
     * @param farmId 猪群id
     * @param sumAt 日期
     * @param changeCount 变动数量
     */
    public void updateDailyBoarPigLiveStock(Long farmId, Date sumAt, Integer changeCount) {
        getSqlSession().update(sqlId("updateDailyBoarPigLiveStock"), ImmutableMap.of("farmId", farmId, "sumAt", DateUtil.toDateString(sumAt), "changeCount", changeCount));
    }
}
