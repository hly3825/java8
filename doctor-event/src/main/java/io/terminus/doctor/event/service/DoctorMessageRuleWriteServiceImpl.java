package io.terminus.doctor.event.service;

import com.google.common.base.Throwables;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import io.terminus.doctor.common.enums.DataEventType;
import io.terminus.doctor.common.event.DataEvent;
import io.terminus.doctor.event.dao.DoctorMessageRuleDao;
import io.terminus.doctor.event.dao.DoctorMessageRuleRoleDao;
import io.terminus.doctor.event.dao.DoctorMessageRuleTemplateDao;
import io.terminus.doctor.event.enums.Category;
import io.terminus.doctor.event.model.DoctorMessageRule;
import io.terminus.doctor.event.model.DoctorMessageRuleRole;
import io.terminus.doctor.event.model.DoctorMessageRuleTemplate;
import io.terminus.zookeeper.pubsub.Publisher;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * Code generated by terminus code gen
 * Desc: 猪场软件消息规则表写服务实现类
 * Date: 2016-05-31
 * Author: chk@terminus.io
 */
@Slf4j
@Service
@RpcProvider
public class DoctorMessageRuleWriteServiceImpl implements DoctorMessageRuleWriteService {

    private final DoctorMessageRuleDao doctorMessageRuleDao;
    private final DoctorMessageRuleTemplateDao doctorMessageRuleTemplateDao;
    private final DoctorMessageRuleRoleDao doctorMessageRuleRoleDao;

    @Autowired
    private Publisher publisher;

    @Autowired
    public DoctorMessageRuleWriteServiceImpl(DoctorMessageRuleDao doctorMessageRuleDao,
                                             DoctorMessageRuleTemplateDao doctorMessageRuleTemplateDao,
                                             DoctorMessageRuleRoleDao doctorMessageRuleRoleDao) {
        this.doctorMessageRuleDao = doctorMessageRuleDao;
        this.doctorMessageRuleTemplateDao = doctorMessageRuleTemplateDao;
        this.doctorMessageRuleRoleDao = doctorMessageRuleRoleDao;
    }

    @Override
    public Response<Long> createMessageRule(DoctorMessageRule messageRule) {
        try {
            doctorMessageRuleDao.create(messageRule);
            publishMessageRuleChg(messageRule.getId());
            return Response.ok(messageRule.getId());
        } catch (Exception e) {
            log.error("create messageRule failed, messageRule:{}, cause:{}", messageRule, Throwables.getStackTraceAsString(e));
            return Response.fail("messageRule.create.fail");
        }
    }

    @Override
    public Response<Boolean> updateMessageRule(DoctorMessageRule messageRule) {
        try {
            // 如果是选择默认
            if (1 == messageRule.getUseDefault()) {
                DoctorMessageRuleTemplate template = doctorMessageRuleTemplateDao.findById(messageRule.getTemplateId());
                messageRule.setRuleValue(template.getRuleValue());
            }
            // 更新与角色绑定的规则
            List<DoctorMessageRuleRole> roles = doctorMessageRuleRoleDao.findByTplAndFarmId(messageRule.getId(), messageRule.getFarmId());
            if (roles != null) {
                roles.stream().filter(role -> role.getUseDefault() != null && 1 == role.getUseDefault())
                        .forEach(role -> {
                            role.setRuleValue(messageRule.getRuleValue());
                            doctorMessageRuleRoleDao.update(role);
                });
            }
            Boolean result = doctorMessageRuleDao.update(messageRule);
            publishMessageRuleChg(messageRule.getId());
            return Response.ok(result);
        } catch (Exception e) {
            log.error("update messageRule failed, messageRule:{}, cause:{}", messageRule, Throwables.getStackTraceAsString(e));
            return Response.fail("messageRule.update.fail");
        }
    }

    @Override
    public Response<Boolean> deleteMessageRuleById(Long messageRuleId) {
        try {
            // 逻辑删除
            DoctorMessageRule rule = doctorMessageRuleDao.findById(messageRuleId);
            if (rule != null) {
                rule.setStatus(DoctorMessageRule.Status.DELETE.getValue());
                Response<Boolean> result = Response.ok(doctorMessageRuleDao.update(rule));
                publishMessageRuleChg(rule.getId());
                return result;
            }
            return Response.ok(Boolean.TRUE);
        } catch (Exception e) {
            log.error("delete messageRule failed, messageRuleId:{}, cause:{}", messageRuleId, Throwables.getStackTraceAsString(e));
            return Response.fail("messageRule.delete.fail");
        }
    }

    @Override
    public Response<Boolean> initTemplate(Long farmId) {
        try{
            if (farmId == null) {
                log.error("init template rule for farm failed, farm id can not be null");
                return Response.fail("message.template.rule.fail");
            }
            List<DoctorMessageRuleTemplate> ruleTemplates = doctorMessageRuleTemplateDao.findAllWarnMessageTpl();
            List<Long> ids = Lists.newArrayList();
            for (int i = 0; ruleTemplates != null && i < ruleTemplates.size(); i++) {
                DoctorMessageRuleTemplate ruleTemplate = ruleTemplates.get(i);
                // 1. 判断模板与farm的关系是否存在
                DoctorMessageRule messageRules = doctorMessageRuleDao.findByTplAndFarm(ruleTemplate.getId(), farmId);
                if (messageRules != null) {
                    continue;
                }
                Integer status = DoctorMessageRule.Status.NORMAL.getValue();
                if (Objects.equals(ruleTemplate.getCategory(), Category.SOW_BACK_FAT.getKey())){
                    status = DoctorMessageRule.Status.DISABLE.getValue();
                }
                // 2. 将模板与farm建立关系
                DoctorMessageRule rule = DoctorMessageRule.builder()
                        .farmId(farmId)
                        .templateId(ruleTemplate.getId())
                        .templateName(ruleTemplate.getName())
                        .type(ruleTemplate.getType())
                        .category(ruleTemplate.getCategory())
                        .ruleValue(ruleTemplate.getRuleValue())
                        .useDefault(1) // 使用默认配置
                        .status(status)
                        .describe(ruleTemplate.getDescribe())
                        .build();
                doctorMessageRuleDao.create(rule);
                ids.add(rule.getId());
            }

            Map<String, List<Long>> map = Maps.newHashMap();
            map.put("messageRuleIds", ids);
            publisher.publish(DataEvent.toBytes(DataEventType.UpdateMessageRules.getKey(), map));
            return Response.ok(Boolean.TRUE);
        } catch (Exception e) {
            log.error("init msg template to farm failed, farm id is {}, cause by {}", farmId, Throwables.getStackTraceAsString(e));
            return Response.fail("init.msg.template.fail");
        }
    }

    private void publishMessageRuleChg(Long messageRuleId){
        Map<String, Long> map = Maps.newHashMap();
        map.put("messageRuleId", messageRuleId);
        try {
            publisher.publish(DataEvent.toBytes(DataEventType.UpdateMessageRule.getKey(), map));
        } catch (Exception e) {
            log.error("publish.message.rule.chg.failed, cause by {}", Throwables.getStackTraceAsString(e));
        }

    }
}
