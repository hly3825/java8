package io.terminus.doctor.event.service;

import com.google.common.base.Throwables;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import io.terminus.doctor.common.utils.DateUtil;
import io.terminus.doctor.event.dao.DoctorDailyPigDao;
import io.terminus.doctor.event.dao.DoctorKpiDao;
import io.terminus.doctor.event.model.DoctorDailyPig;
import lombok.extern.slf4j.Slf4j;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;

/**
 * Code generated by terminus code gen
 * Desc: 猪数量每天记录表写服务实现类
 * Date: 2017-04-17
 */
@Slf4j
@Service
@RpcProvider
public class DoctorDailyPigWriteServiceImpl implements DoctorDailyPigWriteService {

    private final DoctorDailyPigDao doctorDailyPigDao;
    private final DoctorKpiDao doctorKpiDao;

    @Autowired
    public DoctorDailyPigWriteServiceImpl(DoctorDailyPigDao doctorDailyPigDao, DoctorKpiDao doctorKpiDao) {
        this.doctorDailyPigDao = doctorDailyPigDao;
        this.doctorKpiDao = doctorKpiDao;
    }

    @Override
    public Response<Long> createDoctorDailyPig(DoctorDailyPig doctorDailyPig) {
        try {
            doctorDailyPigDao.create(doctorDailyPig);
            return Response.ok(doctorDailyPig.getId());
        } catch (Exception e) {
            log.error("create doctorDailyPig failed, doctorDailyPig:{}, cause:{}", doctorDailyPig, Throwables.getStackTraceAsString(e));
            return Response.fail("doctorDailyPig.create.fail");
        }
    }

    @Override
    public Response<Boolean> updateDoctorDailyPig(DoctorDailyPig doctorDailyPig) {
        try {
            return Response.ok(doctorDailyPigDao.update(doctorDailyPig));
        } catch (Exception e) {
            log.error("update doctorDailyPig failed, doctorDailyPig:{}, cause:{}", doctorDailyPig, Throwables.getStackTraceAsString(e));
            return Response.fail("doctorDailyPig.update.fail");
        }
    }

    @Override
    public Response<Boolean> deleteDoctorDailyPigById(Long doctorDailyPigId) {
        try {
            return Response.ok(doctorDailyPigDao.delete(doctorDailyPigId));
        } catch (Exception e) {
            log.error("delete doctorDailyPig failed, doctorDailyPigId:{}, cause:{}", doctorDailyPigId, Throwables.getStackTraceAsString(e));
            return Response.fail("doctorDailyPig.delete.fail");
        }
    }

    @Override
    public Response<Boolean> createDailyPigs(List<Long> farmIds, Date date) {
        doctorDailyPigDao.deleteBySumAt(date);
        try{
            farmIds.forEach(farmId -> {
                log.info("create daily pigs start, farmId: {}, now is: {}", farmId, DateUtil.toDateTimeString(date));
                DoctorDailyPig doctorDailyPig = getDoctorDailyPig(farmId, date, new DateTime(date).plusSeconds(86399).toDate());
                doctorDailyPigDao.create(doctorDailyPig);
            });
        }catch (Exception e){
            log.error("crate daily pigs failed, cause: {}", Throwables.getStackTraceAsString(e));
            return Response.ok(Boolean.FALSE);
        }
        return Response.ok(Boolean.TRUE);
    }

    @Override
    public Response<Boolean> createDailyPigs(Long farmId, Date date) {
        log.info("create daily pigs start, farmId: {}, now is: {}", farmId, DateUtil.toDateTimeString(date));
        try{
            DoctorDailyPig doctorDailyPig = getDoctorDailyPig(farmId, date, new DateTime(date).plusSeconds(86399).toDate());
            doctorDailyPigDao.create(doctorDailyPig);
        }catch (Exception e){
            log.error("crate daily pigs failed, cause: {}", Throwables.getStackTraceAsString(e));
            return Response.ok(Boolean.FALSE);
        }

        return Response.ok(Boolean.TRUE);
    }

    /**
     *
     * @param farmId
     * @param startAt  开始时间   某一天开始   00:00:00
     * @param endAt    结束时间   某一天最后一秒23:59:59
     * @return
     */
    private DoctorDailyPig getDoctorDailyPig(Long farmId, Date startAt, Date endAt) {
        DoctorDailyPig doctorDailyPig = new DoctorDailyPig();
        doctorDailyPig.setFarmId(farmId);
        doctorDailyPig.setSumAt(startAt);
        doctorDailyPig.setSowPh(doctorKpiDao.realTimeLiveStockPHSow(farmId, startAt));
        doctorDailyPig.setSowCf(doctorKpiDao.realTimeLiveStockFarrowSow(farmId, startAt));
        //母猪存栏变化
        doctorDailyPig.setSowStart(doctorKpiDao.realTimeLiveStockSow(farmId, new DateTime(startAt).minusDays(1).toDate()));
        doctorDailyPig.setSowIn(doctorKpiDao.getInSow(farmId, startAt, endAt));
        doctorDailyPig.setSowDead(doctorKpiDao.getDeadSow(farmId, startAt, endAt));
        doctorDailyPig.setSowWeedOut(doctorKpiDao.getWeedOutSow(farmId, startAt, endAt));
        doctorDailyPig.setSowSale(doctorKpiDao.getSaleSow(farmId, startAt, endAt));
        doctorDailyPig.setSowOtherOut(doctorKpiDao.getOtherOutSow(farmId, startAt, endAt));
        doctorDailyPig.setSowEnd(doctorKpiDao.realTimeLiveStockSow(farmId, startAt));
        //公猪存栏变化
        doctorDailyPig.setBoarStart(doctorKpiDao.realTimeLiveStockBoar(farmId, new DateTime(startAt).minusDays(1).toDate()));
        doctorDailyPig.setBoarIn(doctorKpiDao.getInBoar(farmId, startAt, endAt));
        doctorDailyPig.setBoarDead(doctorKpiDao.getDeadBoar(farmId, startAt, endAt));
        doctorDailyPig.setBoarWeedOut(doctorKpiDao.getWeedOutBoar(farmId, startAt, endAt));
        doctorDailyPig.setBoarSale(doctorKpiDao.getSaleBoar(farmId, startAt, endAt));
        doctorDailyPig.setBoarOtherOut(doctorKpiDao.getOtherOutBoar(farmId, startAt, endAt));
        doctorDailyPig.setBoarEnd(doctorKpiDao.realTimeLiveStockBoar(farmId, startAt));
        //配种情况
        doctorDailyPig.setMateHb(doctorKpiDao.firstMatingCounts(farmId, startAt, endAt));
        doctorDailyPig.setMateDn(doctorKpiDao.weanMatingCounts(farmId, startAt, endAt));
        doctorDailyPig.setMateFq(doctorKpiDao.fanQMatingCounts(farmId, startAt, endAt));
        doctorDailyPig.setMateLc(doctorKpiDao.abortionMatingCounts(farmId, startAt, endAt));
        doctorDailyPig.setMateYx(doctorKpiDao.yinMatingCounts(farmId, startAt, endAt));
        //妊娠检查情况
        doctorDailyPig.setPregPositive(doctorKpiDao.checkYangCounts(farmId, startAt, endAt));
        doctorDailyPig.setPregNegative(doctorKpiDao.checkYingCounts(farmId, startAt, endAt));
        doctorDailyPig.setPregFanqing(doctorKpiDao.checkFanQCounts(farmId, startAt, endAt));
        doctorDailyPig.setPregLiuchan(doctorKpiDao.checkAbortionCounts(farmId, startAt, endAt));
        //分娩情况
        doctorDailyPig.setFarrowNest(doctorKpiDao.getDelivery(farmId, startAt, endAt));
        doctorDailyPig.setFarrowAll(doctorKpiDao.getDeliveryAll(farmId, startAt, endAt));
        doctorDailyPig.setFarrowLive(doctorKpiDao.getDeliveryLive(farmId, startAt, endAt));
        doctorDailyPig.setFarrowHealth(doctorKpiDao.getDeliveryHealth(farmId, startAt, endAt));
        doctorDailyPig.setFarrowWeak(doctorKpiDao.getDeliveryWeak(farmId, startAt, endAt));
        doctorDailyPig.setFarrowDead(doctorKpiDao.getDeliveryDead(farmId, startAt, endAt));
        doctorDailyPig.setFarrowJx(doctorKpiDao.getDeliveryJx(farmId, startAt, endAt));
        doctorDailyPig.setFarrowMny(doctorKpiDao.getDeliveryMny(farmId, startAt, endAt));
        doctorDailyPig.setFarrowBlack(doctorKpiDao.getDeliveryBlack(farmId, startAt, endAt));
        doctorDailyPig.setFarrowSjmh(doctorKpiDao.getDeliveryDeadBlackMuJi(farmId, startAt, endAt));
        doctorDailyPig.setFarrowWeight(doctorKpiDao.getFarrowWeight(farmId, startAt, endAt));
        doctorDailyPig.setFarrowAvgWeight(doctorKpiDao.getFarrowWeightAvg(farmId, startAt, endAt));
        //断奶情况
        doctorDailyPig.setWeanNest(doctorKpiDao.getWeanSow(farmId, startAt, endAt));
        doctorDailyPig.setWeanCount(doctorKpiDao.getWeanPiglet(farmId, startAt, endAt));
        doctorDailyPig.setWeanAvgWeight(doctorKpiDao.getWeanPigletWeightAvg(farmId, startAt, endAt));
        doctorDailyPig.setWeanDayAge(doctorKpiDao.getWeanDayAgeAvg(farmId, startAt, endAt));
        return doctorDailyPig;
    }
}
