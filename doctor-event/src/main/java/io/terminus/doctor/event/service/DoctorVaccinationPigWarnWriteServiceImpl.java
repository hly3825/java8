package io.terminus.doctor.event.service;

import com.google.common.base.Throwables;
import com.google.common.collect.Maps;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import io.terminus.doctor.common.enums.DataEventType;
import io.terminus.doctor.common.event.DataEvent;
import io.terminus.doctor.event.dao.DoctorVaccinationPigWarnDao;
import io.terminus.doctor.event.model.DoctorVaccinationPigWarn;
import io.terminus.zookeeper.pubsub.Publisher;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Map;

/**
 * Code generated by terminus code gen
 * Desc: 猪只设置免疫程序统计方式写服务实现类
 * Date: 2016-06-13
 */
@Slf4j
@Service
@RpcProvider
public class DoctorVaccinationPigWarnWriteServiceImpl implements DoctorVaccinationPigWarnWriteService {

    private final DoctorVaccinationPigWarnDao doctorVaccinationPigWarnDao;
    @Autowired
    private Publisher publisher;

    @Autowired
    public DoctorVaccinationPigWarnWriteServiceImpl(DoctorVaccinationPigWarnDao doctorVaccinationPigWarnDao) {
        this.doctorVaccinationPigWarnDao = doctorVaccinationPigWarnDao;
    }

    @Override
    public Response<Long> createVaccinationPigWarn(DoctorVaccinationPigWarn vaccinationPigWarn) {
        try {
            doctorVaccinationPigWarnDao.create(vaccinationPigWarn);
            return Response.ok(vaccinationPigWarn.getId());
        } catch (Exception e) {
            log.error("create vaccinationPigWarn failed, vaccinationPigWarn:{}, cause:{}", vaccinationPigWarn, Throwables.getStackTraceAsString(e));
            return Response.fail("vaccinationPigWarn.create.fail");
        }
    }

    @Override
    public Response<Boolean> updateVaccinationPigWarn(DoctorVaccinationPigWarn vaccinationPigWarn) {
        try {
            return Response.ok(doctorVaccinationPigWarnDao.update(vaccinationPigWarn));
        } catch (Exception e) {
            log.error("update vaccinationPigWarn failed, vaccinationPigWarn:{}, cause:{}", vaccinationPigWarn, Throwables.getStackTraceAsString(e));
            return Response.fail("vaccinationPigWarn.update.fail");
        }
    }

    @Override
    public Response<Boolean> deleteVaccinationPigWarnById(Long vaccinationPigWarnId) {
        try {
            return Response.ok(doctorVaccinationPigWarnDao.delete(vaccinationPigWarnId));
        } catch (Exception e) {
            log.error("delete vaccinationPigWarn failed, vaccinationPigWarnId:{}, cause:{}", vaccinationPigWarnId, Throwables.getStackTraceAsString(e));
            return Response.fail("vaccinationPigWarn.delete.fail");
        }
    }

    private void publishMessageRuleChg(Long messageRuleId){
        Map<String, Long> map = Maps.newHashMap();
        map.put("messageRuleId", messageRuleId);
        try {
            publisher.publish(DataEvent.toBytes(DataEventType.UpdateMessageRule.getKey(), map));
        } catch (Exception e) {
            log.error("publish.message.rule.chg.failed, cause by {}", Throwables.getStackTraceAsString(e));
        }
    }
}
