package io.terminus.doctor.event.service;

import com.google.common.base.Throwables;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.PageInfo;
import io.terminus.common.model.Paging;
import io.terminus.common.model.Response;
import io.terminus.common.utils.BeanMapper;
import io.terminus.doctor.event.dao.DoctorEventModifyLogDao;
import io.terminus.doctor.event.dto.DoctorEventModifyRequestDto;
import io.terminus.doctor.event.model.DoctorEventModifyLog;
import io.terminus.doctor.event.model.DoctorEventModifyRequest;
import io.terminus.doctor.event.model.DoctorGroupEvent;
import io.terminus.doctor.event.model.DoctorPigEvent;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import static io.terminus.doctor.common.utils.JsonMapperUtil.JSON_NON_DEFAULT_MAPPER;

/**
 * Code generated by terminus code gen
 * Desc: 读服务实现类
 * Date: 2017-04-05
 */
@Slf4j
@Service
@RpcProvider
public class DoctorEventModifyLogReadServiceImpl implements DoctorEventModifyLogReadService {

    private final DoctorEventModifyLogDao doctorEventModifyLogDao;

    @Autowired
    public DoctorEventModifyLogReadServiceImpl(DoctorEventModifyLogDao doctorEventModifyLogDao) {
        this.doctorEventModifyLogDao = doctorEventModifyLogDao;
    }

    @Override
    public Response<DoctorEventModifyLog> findDoctorEventModifyLogById(Long doctorEventModifyLogId) {
        try {
            return Response.ok(doctorEventModifyLogDao.findById(doctorEventModifyLogId));
        } catch (Exception e) {
            log.error("find doctorEventModifyLog by id failed, doctorEventModifyLogId:{}, cause:{}", doctorEventModifyLogId, Throwables.getStackTraceAsString(e));
            return Response.fail("doctorEventModifyLog.find.fail");
        }
    }

    @Override
    public Response<DoctorEventModifyRequestDto> findRequestDto(Long requestId) {
        try {
            DoctorEventModifyLog modifyLog = doctorEventModifyLogDao.findById(requestId);
            return Response.ok(buildDoctorEventModifyRequestDto(modifyLog));
        } catch (Exception e) {
            log.error("find request dto failed, requestId:{}, cause:{}", requestId, Throwables.getStackTraceAsString(e));
            return Response.fail("find.request.dto.failed");
        }
    }

    @Override
    public Response<Paging<DoctorEventModifyRequestDto>> pageModifyLog(DoctorEventModifyLog modifyLog, Integer pageNo, Integer pageSize) {
        try {
            PageInfo pageInfo = PageInfo.of(pageNo, pageSize);
            Paging<DoctorEventModifyLog> modifyLogPaging = doctorEventModifyLogDao.pagingExcludeDeleteLog(pageInfo.getOffset(), pageInfo.getLimit(), modifyLog);
            List<DoctorEventModifyRequestDto> requestDtoList =  modifyLogPaging.getData().stream()
                    .map(this::buildDoctorEventModifyRequestDto).collect(Collectors.toList());
            return Response.ok(new Paging<>(modifyLogPaging.getTotal(), requestDtoList));
        } catch (Exception e) {
            log.error("page modify log failed");
            return Response.fail("page.modify.log.failed");
        }
    }

    private DoctorEventModifyRequestDto buildDoctorEventModifyRequestDto(DoctorEventModifyLog modifyLog) {
        DoctorEventModifyRequestDto requestDto = BeanMapper.map(modifyLog, DoctorEventModifyRequestDto.class);

        if (Objects.equals(modifyLog.getType(), DoctorEventModifyRequest.TYPE.PIG.getValue())) {
            requestDto.setNewPigEvent(JSON_NON_DEFAULT_MAPPER.fromJson(modifyLog.getToEvent(), DoctorPigEvent.class));
            requestDto.setOldPigEvent(JSON_NON_DEFAULT_MAPPER.fromJson(modifyLog.getFromEvent(), DoctorPigEvent.class));
        } else {
            requestDto.setNewGroupEvent(JSON_NON_DEFAULT_MAPPER.fromJson(modifyLog.getToEvent(), DoctorGroupEvent.class));
            requestDto.setOldGroupEvent(JSON_NON_DEFAULT_MAPPER.fromJson(modifyLog.getFromEvent(), DoctorGroupEvent.class));
        }
        return requestDto;
    }
}
