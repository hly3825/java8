package io.terminus.doctor.event.service;

import com.google.common.base.Throwables;
import com.google.common.collect.ImmutableMap;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.PageInfo;
import io.terminus.common.model.Paging;
import io.terminus.common.model.Response;
import io.terminus.common.utils.MapBuilder;
import io.terminus.doctor.event.dao.DoctorVaccinationPigWarnDao;
import io.terminus.doctor.event.model.DoctorVaccinationPigWarn;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

/**
 * Code generated by terminus code gen
 * Desc: 猪只设置免疫程序统计方式读服务实现类
 * Date: 2016-06-13
 */
@Slf4j
@Service
@RpcProvider
public class DoctorVaccinationPigWarnReadServiceImpl implements DoctorVaccinationPigWarnReadService {

    private final DoctorVaccinationPigWarnDao doctorVaccinationPigWarnDao;

    @Autowired
    public DoctorVaccinationPigWarnReadServiceImpl(DoctorVaccinationPigWarnDao doctorVaccinationPigWarnDao) {
        this.doctorVaccinationPigWarnDao = doctorVaccinationPigWarnDao;
    }

    @Override
    public Response<DoctorVaccinationPigWarn> findVaccinationPigWarnById(Long vaccinationPigWarnId) {
        try {
            return Response.ok(doctorVaccinationPigWarnDao.findById(vaccinationPigWarnId));
        } catch (Exception e) {
            log.error("find vaccinationPigWarn by id failed, vaccinationPigWarnId:{}, cause:{}", vaccinationPigWarnId, Throwables.getStackTraceAsString(e));
            return Response.fail("vaccinationPigWarn.find.fail");
        }
    }

    @Override
    public Response<Paging<DoctorVaccinationPigWarn>> pagingVaccPigWarns(Integer pageNo, Integer pageSize, Long farmId) {
        try{
            PageInfo pageInfo = new PageInfo(pageNo, pageSize);
            return Response.ok(doctorVaccinationPigWarnDao.
                    paging(pageInfo.getOffset(), pageInfo.getLimit(), MapBuilder.<String, Object>of().put("farmId", farmId).map()));
        } catch (Exception e) {
            log.error("find vaccinationPigWarn by id failed, farm id:{} , cause by {}", farmId, Throwables.getStackTraceAsString(e));
            return Response.fail("vaccinationPigWarn.find.fail");
        }
    }

    @Override
    public Response<List<DoctorVaccinationPigWarn>> findVaccinationPigWarnsByFarmId(Long farmId) {
        try{
            return this.findVaccinationPigWarns(ImmutableMap.of("farmId", farmId));
        } catch (Exception e) {
            log.error("find vaccinationPigWarns failed, farmId:{} ,cause by {}", farmId, Throwables.getStackTraceAsString(e));
            return Response.fail("vaccinationPigWarn.find.fail");
        }
    }

    @Override
    public Response<List<DoctorVaccinationPigWarn>> findVaccinationPigWarns(Map<String, Object> criteria) {
        try{
            return Response.ok(doctorVaccinationPigWarnDao.list(criteria));
        } catch (Exception e) {
            log.error("find vaccinationPigWarns failed, criteria:{}, cause:{}", criteria, Throwables.getStackTraceAsString(e));
            return Response.fail("vaccinationPigWarn.find.fail");
        }
    }
}
