package io.terminus.doctor.event.service;

import com.google.common.base.Throwables;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import io.terminus.common.utils.Dates;
import io.terminus.doctor.common.utils.DateUtil;
import io.terminus.doctor.event.dao.DoctorDailyReportDao;
import io.terminus.doctor.event.dao.DoctorKpiDao;
import io.terminus.doctor.event.dto.report.common.DoctorLiveStockChangeCommonReport;
import io.terminus.doctor.event.model.DoctorDailyReport;
import lombok.extern.slf4j.Slf4j;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;
import java.util.Objects;

/**
 * Code generated by terminus code gen
 * Desc: 日报写服务实现类
 * Date: 2017-04-19
 */
@Slf4j
@Service
@RpcProvider
public class DoctorDailyReportWriteServiceImpl implements DoctorDailyReportWriteService {

    private final DoctorDailyReportDao doctorDailyReportDao;
    private final DoctorKpiDao doctorKpiDao;

    @Autowired
    public DoctorDailyReportWriteServiceImpl(DoctorDailyReportDao doctorDailyReportDao,
                                             DoctorKpiDao doctorKpiDao) {
        this.doctorDailyReportDao = doctorDailyReportDao;
        this.doctorKpiDao = doctorKpiDao;
    }

    @Override
    public Response<Long> createDoctorDailyReport(DoctorDailyReport doctorDailyReport) {
        try {
            doctorDailyReportDao.create(doctorDailyReport);
            return Response.ok(doctorDailyReport.getId());
        } catch (Exception e) {
            log.error("create doctorDailyReport failed, doctorDailyReport:{}, cause:{}", doctorDailyReport, Throwables.getStackTraceAsString(e));
            return Response.fail("doctorDailyReport.create.fail");
        }
    }

    @Override
    public Response<Boolean> updateDoctorDailyReport(DoctorDailyReport doctorDailyReport) {
        try {
            return Response.ok(doctorDailyReportDao.update(doctorDailyReport));
        } catch (Exception e) {
            log.error("update doctorDailyReport failed, doctorDailyReport:{}, cause:{}", doctorDailyReport, Throwables.getStackTraceAsString(e));
            return Response.fail("doctorDailyReport.update.fail");
        }
    }

    @Override
    public Response<Boolean> deleteDoctorDailyReportById(Long doctorDailyReportId) {
        try {
            return Response.ok(doctorDailyReportDao.delete(doctorDailyReportId));
        } catch (Exception e) {
            log.error("delete doctorDailyReport failed, doctorDailyReportId:{}, cause:{}", doctorDailyReportId, Throwables.getStackTraceAsString(e));
            return Response.fail("doctorDailyReport.delete.fail");
        }
    }

    @Override
    public Response<Boolean> generateYesterdayAndTodayReports(List<Long> farmIds) {
        Date today = new Date();
        Date yesterday = new DateTime(today).minusDays(1).toDate();
        farmIds.forEach(farmId -> {
            log.info("create daily report start, farmId: {}, date: {}, now: {}", farmId, DateUtil.toDateString(today), DateUtil.toDateTimeString(new Date()));
            createOrUpdateReport(farmId, yesterday);
            createOrUpdateReport(farmId, today);
        });
        return Response.ok(Boolean.TRUE);
    }

    @Override
    public Response<Boolean> createDailyReports(Long farmId, Date beginDate, Date endDate) {
        try{
            beginDate = Dates.startOfDay(beginDate);
            endDate = Dates.startOfDay(endDate);
            while(!beginDate.after(endDate)){
                log.info("create daily report start, farmId: {}, date: {}, now: {}", farmId, DateUtil.toDateString(beginDate), DateUtil.toDateTimeString(new Date()));
                createOrUpdateReport(farmId, beginDate);
                beginDate = new DateTime(beginDate).plusDays(1).toDate();
            }
            return Response.ok(Boolean.TRUE);
        }catch(Exception e) {
            log.error("updateHistoryDailyReport failed, cause:{}", Throwables.getStackTraceAsString(e));
            return Response.fail("update.history.daily.report.fail");
        }
    }

    @Override
    public Response<Boolean> createDailyReports(List<Long> farmIds, Date date) {
        farmIds.forEach(farmId -> {
            log.info("create daily report start, farmId: {}, date: {}, now: {}", farmId, DateUtil.toDateString(date), DateUtil.toDateTimeString(new Date()));
            createOrUpdateReport(farmId, date);
        });
        return Response.ok(Boolean.TRUE);
    }

    private Boolean createOrUpdateReport(Long farmId, Date date) {
        DoctorDailyReport newReport = null;
        try{
            newReport = getdoctorDailyReport(farmId, date, DateUtil.getDateEnd(new DateTime(date)).toDate());
            newReport = caculateIndicator(newReport);
            DoctorDailyReport oldDayReport = doctorDailyReportDao.findByFarmIdAndSumAt(farmId, date);
            if(!Objects.isNull(oldDayReport)){
                newReport.setId(oldDayReport.getId());
                doctorDailyReportDao.update(newReport);
                return Boolean.TRUE;
            }
            doctorDailyReportDao.create(newReport);

        }catch (Exception e){
            log.info("create or update daily report failed, report: {}, cause: {}", newReport, Throwables.getStackTraceAsString(e));
            return Boolean.FALSE;
        }
        return Boolean.TRUE;
    }


    private DoctorDailyReport getdoctorDailyReport(Long farmId, Date startAt, Date endAt) {
        DoctorDailyReport doctorDailyReport = new DoctorDailyReport();
        doctorDailyReport.setFarmId(farmId);
        doctorDailyReport.setSumAt(DateUtil.toDateString(startAt));
        doctorDailyReport.setSowPh(doctorKpiDao.realTimeLiveStockPHSow(farmId, startAt));
        doctorDailyReport.setSowCf(doctorKpiDao.realTimeLiveStockFarrowSow(farmId, startAt));
        //母猪存栏变化
        doctorDailyReport.setSowStart(doctorKpiDao.realTimeLiveStockSow(farmId, new DateTime(startAt).minusDays(1).toDate()));
        doctorDailyReport.setSowIn(doctorKpiDao.getInSow(farmId, startAt, endAt));
        doctorDailyReport.setSowDead(doctorKpiDao.getDeadSow(farmId, startAt, endAt));
        doctorDailyReport.setSowWeedOut(doctorKpiDao.getWeedOutSow(farmId, startAt, endAt));
        doctorDailyReport.setSowSale(doctorKpiDao.getSaleSow(farmId, startAt, endAt));
        doctorDailyReport.setSowOtherOut(doctorKpiDao.getOtherOutSow(farmId, startAt, endAt));
        doctorDailyReport.setSowEnd(doctorKpiDao.realTimeLiveStockSow(farmId, startAt));
        //公猪存栏变化
        doctorDailyReport.setBoarStart(doctorKpiDao.realTimeLiveStockBoar(farmId, new DateTime(startAt).minusDays(1).toDate()));
        doctorDailyReport.setBoarIn(doctorKpiDao.getInBoar(farmId, startAt, endAt));
        doctorDailyReport.setBoarDead(doctorKpiDao.getDeadBoar(farmId, startAt, endAt));
        doctorDailyReport.setBoarWeedOut(doctorKpiDao.getWeedOutBoar(farmId, startAt, endAt));
        doctorDailyReport.setBoarSale(doctorKpiDao.getSaleBoar(farmId, startAt, endAt));
        doctorDailyReport.setBoarOtherOut(doctorKpiDao.getOtherOutBoar(farmId, startAt, endAt));
        doctorDailyReport.setBoarEnd(doctorKpiDao.realTimeLiveStockBoar(farmId, startAt));
        //配种情况
        doctorDailyReport.setMateHb(doctorKpiDao.firstMatingCounts(farmId, startAt, endAt));
        doctorDailyReport.setMateDn(doctorKpiDao.weanMatingCounts(farmId, startAt, endAt));
        doctorDailyReport.setMateFq(doctorKpiDao.fanQMatingCounts(farmId, startAt, endAt));
        doctorDailyReport.setMateLc(doctorKpiDao.abortionMatingCounts(farmId, startAt, endAt));
        doctorDailyReport.setMateYx(doctorKpiDao.yinMatingCounts(farmId, startAt, endAt));
        //妊娠检查情况
        doctorDailyReport.setPregPositive(doctorKpiDao.checkYangCounts(farmId, startAt, endAt));
        doctorDailyReport.setPregNegative(doctorKpiDao.checkYingCounts(farmId, startAt, endAt));
        doctorDailyReport.setPregFanqing(doctorKpiDao.checkFanQCounts(farmId, startAt, endAt));
        doctorDailyReport.setPregLiuchan(doctorKpiDao.checkAbortionCounts(farmId, startAt, endAt));
        //分娩情况
        doctorDailyReport.setFarrowNest(doctorKpiDao.getDelivery(farmId, startAt, endAt));
        doctorDailyReport.setFarrowAll(doctorKpiDao.getDeliveryAll(farmId, startAt, endAt));
        doctorDailyReport.setFarrowLive(doctorKpiDao.getDeliveryLive(farmId, startAt, endAt));
        doctorDailyReport.setFarrowHealth(doctorKpiDao.getDeliveryHealth(farmId, startAt, endAt));
        doctorDailyReport.setFarrowWeak(doctorKpiDao.getDeliveryWeak(farmId, startAt, endAt));
        doctorDailyReport.setFarrowDead(doctorKpiDao.getDeliveryDead(farmId, startAt, endAt));
        doctorDailyReport.setFarrowJx(doctorKpiDao.getDeliveryJx(farmId, startAt, endAt));
        doctorDailyReport.setFarrowMny(doctorKpiDao.getDeliveryMny(farmId, startAt, endAt));
        doctorDailyReport.setFarrowBlack(doctorKpiDao.getDeliveryBlack(farmId, startAt, endAt));
        doctorDailyReport.setFarrowSjmh(doctorKpiDao.getDeliveryDeadBlackMuJi(farmId, startAt, endAt));
        doctorDailyReport.setFarrowWeight(doctorKpiDao.getFarrowWeight(farmId, startAt, endAt));
        doctorDailyReport.setFarrowAvgWeight(doctorKpiDao.getFarrowWeightAvg(farmId, startAt, endAt));
        //断奶情况
        doctorDailyReport.setWeanNest(doctorKpiDao.getWeanSow(farmId, startAt, endAt));
        doctorDailyReport.setWeanCount(doctorKpiDao.getWeanPiglet(farmId, startAt, endAt));
        doctorDailyReport.setWeanAvgWeight(doctorKpiDao.getWeanPigletWeightAvg(farmId, startAt, endAt));
        doctorDailyReport.setWeanDayAge(doctorKpiDao.getWeanDayAgeAvg(farmId, startAt, endAt));
        return doctorDailyReport;
    }

    private DoctorDailyReport caculateIndicator(DoctorDailyReport doctorDailyReport){
        Long farmId = doctorDailyReport.getFarmId();
        Date startAt = DateUtil.toDate(doctorDailyReport.getSumAt());
        Date endAt = DateUtil.getDateEnd(new DateTime(startAt)).toDate();

        DoctorLiveStockChangeCommonReport changeCommonReport = doctorKpiDao.getMonthlyLiveStockChangeFeedCount(farmId, startAt, endAt);
        doctorDailyReport.setFattenPrice(doctorKpiDao.getGroupSaleFattenPrice(farmId, startAt, endAt));
        doctorDailyReport.setBasePrice10(doctorKpiDao.getGroupSaleBasePrice10(farmId, startAt, endAt));
        doctorDailyReport.setBasePrice15(doctorKpiDao.getGroupSaleBasePrice15(farmId, startAt, endAt));

        doctorDailyReport.setFarrowFeed(changeCommonReport.getFarrowFeedCount());
        doctorDailyReport.setFarrowFeedAmount(changeCommonReport.getFarrowFeedAmount());
        doctorDailyReport.setFarrowMedicineAmount(changeCommonReport.getFarrowDrugAmount());
        doctorDailyReport.setFarrowVaccinationAmount(changeCommonReport.getFarrowVaccineAmount());
        doctorDailyReport.setFarrowConsumableAmount(changeCommonReport.getFarrowConsumerAmount());

        doctorDailyReport.setNurseryFeed(changeCommonReport.getNurseryFeedCount());
        doctorDailyReport.setNurseryFeedAmount(changeCommonReport.getNurseryFeedAmount());
        doctorDailyReport.setNurseryMedicineAmount(changeCommonReport.getNurseryDrugAmount());
        doctorDailyReport.setNurseryVaccinationAmount(changeCommonReport.getNurseryVaccineAmount());
        doctorDailyReport.setNurseryConsumableAmount(changeCommonReport.getNurseryConsumerAmount());

        doctorDailyReport.setFattenFeed(changeCommonReport.getFattenFeedCount());
        doctorDailyReport.setFattenFeedAmount(changeCommonReport.getFattenFeedAmount());
        doctorDailyReport.setFattenMedicineAmount(changeCommonReport.getFattenDrugAmount());
        doctorDailyReport.setFattenVaccinationAmount(changeCommonReport.getFattenVaccineAmount());
        doctorDailyReport.setFattenConsumableAmount(changeCommonReport.getFattenConsumerAmount());

        doctorDailyReport.setHoubeiFeed(changeCommonReport.getHoubeiFeedCount());
        doctorDailyReport.setHoubeiFeedAmount(changeCommonReport.getHoubeiFeedAmount());
        doctorDailyReport.setHoubeiMedicineAmount(changeCommonReport.getHoubeiDrugAmount());
        doctorDailyReport.setHoubeiVaccinationAmount(changeCommonReport.getHoubeiVaccineAmount());
        doctorDailyReport.setHoubeiConsumableAmount(changeCommonReport.getHoubeiConsumerAmount());

        return doctorDailyReport;
    }

}
