package io.terminus.doctor.event.service;

import com.google.common.base.Throwables;
import com.google.common.collect.Lists;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import io.terminus.common.utils.Dates;
import io.terminus.doctor.common.utils.DateUtil;
import io.terminus.doctor.event.dao.DoctorDailyGroupDao;
import io.terminus.doctor.event.dao.DoctorDailyReportDao;
import io.terminus.doctor.event.dto.report.daily.DoctorDailyReportDto;
import io.terminus.doctor.event.model.DoctorDailyReport;
import io.terminus.doctor.event.model.DoctorGroupStock;
import lombok.extern.slf4j.Slf4j;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;

import static io.terminus.common.utils.Arguments.isEmpty;

/**
 * Code generated by terminus code gen
 * Desc: 日报读服务实现类
 * Date: 2017-04-19
 */
@Slf4j
@Service
@RpcProvider
public class DoctorDailyReportReadServiceImpl implements DoctorDailyReportReadService {

    private final DoctorDailyReportDao doctorDailyReportDao;
    private final DoctorDailyGroupDao doctorDailyGroupDao;

    @Autowired
    public DoctorDailyReportReadServiceImpl(DoctorDailyReportDao doctorDailyReportDao,
                                            DoctorDailyGroupDao doctorDailyGroupDao) {
        this.doctorDailyReportDao = doctorDailyReportDao;
        this.doctorDailyGroupDao = doctorDailyGroupDao;
    }

    @Override
    public Response<DoctorDailyReport> findDoctorDailyReportById(Long doctorDailyReportId) {
        try {
            return Response.ok(doctorDailyReportDao.findById(doctorDailyReportId));
        } catch (Exception e) {
            log.error("find doctorDailyReport by id failed, doctorDailyReportId:{}, cause:{}", doctorDailyReportId, Throwables.getStackTraceAsString(e));
            return Response.fail("doctorDailyReport.find.fail");
        }
    }

    @Override
    public Response<DoctorDailyReport> findDailyReportByFarmIdAndSumAt(Long farmId, String date) {
        return null;
    }

    @Override
    public Response<List<DoctorDailyReport>> findDailyReportByFarmIdAndRange(Long farmId, String startAt, String endAt) {
        return null;
    }

    @Override
    public Response<DoctorDailyReportDto> findDailyReportDtoByFarmIdAndSumAt(Long farmId, String date) {
        try{
            return Response.ok(getDoctorDailyReportDto(farmId, date));
        }catch (Exception e){
            log.error("find doctorDailyReport by farmId: {}, sumAt: {} failed, cause: {}", farmId, date, Throwables.getStackTraceAsString(e));
            return Response.fail("doctorDailyReport.find.fail");
        }

    }

    private DoctorDailyReportDto getDoctorDailyReportDto(Long farmId, String date) {
        DoctorDailyReportDto doctorDailyReportDto = new DoctorDailyReportDto();
        DoctorDailyReport dailyReport = doctorDailyReportDao.findByFarmIdAndSumAt(farmId, date);
        DoctorGroupStock groupStock = doctorDailyGroupDao.getGroupStock(farmId, date);
        doctorDailyReportDto.setDailyReport(dailyReport);
        doctorDailyReportDto.setGroupStock(groupStock);
        return doctorDailyReportDto;
    }

    @Override
    public Response<List<DoctorDailyReportDto>> findDailyReportDtoByFarmIdAndRange(Long farmId, String startAt, String endAt) {
        try {
            Date end = isEmpty(endAt) ? new Date() : DateUtil.toDate(endAt);
            Date start = isEmpty(startAt) ? new DateTime(end).plusDays(-30).toDate() : DateUtil.toDate(startAt);

            List<DoctorDailyReportDto> report = Lists.newArrayList();
            while (!Dates.startOfDay(start).after(Dates.startOfDay(end))) {
                report.add(getDoctorDailyReportDto(farmId, DateUtil.toDateString(start)));
                start = new DateTime(start).plusDays(1).toDate();
            }
            return Response.ok(report);
        } catch (Exception e) {
            log.error("find dailyReport by farm id and range fail, farmId:{}, startAt:{}, endAt, cause:{}",
                    farmId, startAt, endAt, Throwables.getStackTraceAsString(e));
            return Response.ok(Lists.newArrayList());
        }
    }

    @Override
    public Response<List<DoctorDailyReportDto>> findDailyReportBySumAt(Date date) {
        List<DoctorDailyReportDto> dtoList = Lists.newArrayList();
        try{
            List<DoctorDailyReport> reports = doctorDailyGroupDao.findBySumAt(date);
            reports.forEach(report -> {
                dtoList.add(getDoctorDailyReportDto(report));
            });
        }catch (Exception e){
            log.error("find dailyReport by sumAt: {} failed, cause:{}", DateUtil.toDateString(date), Throwables.getStackTraceAsString(e));
            return Response.fail("doctorDailyReport.find.fail");
        }

        return Response.ok(dtoList);
    }

    private DoctorDailyReportDto getDoctorDailyReportDto(DoctorDailyReport report) {
        DoctorDailyReportDto dto = new DoctorDailyReportDto();
        dto.setDailyReport(report);
        DoctorGroupStock groupStock = doctorDailyGroupDao.getGroupStock(report.getFarmId(), report.getSumAt());
        dto.setGroupStock(groupStock);
        return dto;
    }
}
