package io.terminus.doctor.event.service;

import com.google.common.base.Throwables;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import io.terminus.doctor.event.dao.DoctorDailyGroupDao;
import io.terminus.doctor.event.dao.DoctorDailyReportDao;
import io.terminus.doctor.event.dto.report.daily.DoctorDailyReportDto;
import io.terminus.doctor.event.model.DoctorDailyReport;
import io.terminus.doctor.event.model.DoctorGroupStock;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;

/**
 * Code generated by terminus code gen
 * Desc: 日报读服务实现类
 * Date: 2017-04-19
 */
@Slf4j
@Service
@RpcProvider
public class DoctorDailyReportReadServiceImpl implements DoctorDailyReportReadService {

    private final DoctorDailyReportDao doctorDailyReportDao;
    private final DoctorDailyGroupDao doctorDailyGroupDao;

    @Autowired
    public DoctorDailyReportReadServiceImpl(DoctorDailyReportDao doctorDailyReportDao,
                                            DoctorDailyGroupDao doctorDailyGroupDao) {
        this.doctorDailyReportDao = doctorDailyReportDao;
        this.doctorDailyGroupDao = doctorDailyGroupDao;
    }

    @Override
    public Response<DoctorDailyReport> findDoctorDailyReportById(Long doctorDailyReportId) {
        try {
            return Response.ok(doctorDailyReportDao.findById(doctorDailyReportId));
        } catch (Exception e) {
            log.error("find doctorDailyReport by id failed, doctorDailyReportId:{}, cause:{}", doctorDailyReportId, Throwables.getStackTraceAsString(e));
            return Response.fail("doctorDailyReport.find.fail");
        }
    }

    @Override
    public Response<DoctorDailyReport> findDailyReportByFarmIdAndSumAt(Long farmId, String date) {
        return null;
    }

    @Override
    public Response<List<DoctorDailyReport>> findDailyReportByFarmIdAndRange(Long farmId, String startAt, String endAt) {
        return null;
    }

    @Override
    public Response<DoctorDailyReportDto> findDailyReportDtoByFarmIdAndSumAt(Long farmId, String date) {
        DoctorDailyReportDto doctorDailyReportDto = new DoctorDailyReportDto();
        DoctorDailyReport dailyReport = doctorDailyReportDao.findByFarmIdAndSumAt(farmId, date);
        DoctorGroupStock groupStock = doctorDailyGroupDao.getGroupStock(farmId, date);
        doctorDailyReportDto.setDailyReport(dailyReport);
        doctorDailyReportDto.setGroupStock(groupStock);
        return Response.ok(doctorDailyReportDto);
    }

    @Override
    public Response<List<DoctorDailyReportDto>> findDailyReportDtoByFarmIdAndRange(Long farmId, String startAt, String endAt) {
        return null;
    }

    @Override
    public Response<List<DoctorDailyReport>> findDailyReportBySumAt(Date date) {
        return null;
    }
}
