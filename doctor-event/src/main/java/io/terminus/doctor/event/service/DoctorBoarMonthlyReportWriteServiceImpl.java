package io.terminus.doctor.event.service;

import com.google.common.base.Throwables;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import io.terminus.common.utils.Dates;
import io.terminus.doctor.common.utils.DateUtil;
import io.terminus.doctor.event.dao.DoctorBoarMonthlyReportDao;
import io.terminus.doctor.event.dao.DoctorKpiDao;
import io.terminus.doctor.event.manager.DoctorBoarMonthlyReportManager;
import io.terminus.doctor.event.model.DoctorBoarMonthlyReport;
import lombok.extern.slf4j.Slf4j;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;

/**
 * Code generated by terminus code gen
 * Desc: 公猪生产成绩月报写服务实现类
 * Date: 2016-09-12
 */
@Slf4j
@Service
@RpcProvider
public class DoctorBoarMonthlyReportWriteServiceImpl implements DoctorBoarMonthlyReportWriteService {

    private final DoctorBoarMonthlyReportDao doctorBoarMonthlyReportDao;
    private final DoctorBoarMonthlyReportManager doctorBoarMonthlyReportManager;
    private final DoctorKpiDao doctorKpiDao;


    @Autowired
    public DoctorBoarMonthlyReportWriteServiceImpl(DoctorBoarMonthlyReportDao doctorBoarMonthlyReportDao,
                                                   DoctorBoarMonthlyReportManager doctorBoarMonthlyReportManager,
                                                   DoctorKpiDao doctorKpiDao) {
        this.doctorBoarMonthlyReportDao = doctorBoarMonthlyReportDao;
        this.doctorBoarMonthlyReportManager = doctorBoarMonthlyReportManager;
        this.doctorKpiDao = doctorKpiDao;
    }

    @Override
    public Response<Long> createDoctorBoarMonthlyReport(DoctorBoarMonthlyReport doctorBoarMonthlyReport) {
        try {
            doctorBoarMonthlyReportDao.create(doctorBoarMonthlyReport);
            return Response.ok(doctorBoarMonthlyReport.getId());
        } catch (Exception e) {
            log.error("create doctorBoarMonthlyReport failed, doctorBoarMonthlyReport:{}, cause:{}", doctorBoarMonthlyReport, Throwables.getStackTraceAsString(e));
            return Response.fail("doctorBoarMonthlyReport.create.fail");
        }
    }

    @Override
    public Response<Boolean> updateDoctorBoarMonthlyReport(DoctorBoarMonthlyReport doctorBoarMonthlyReport) {
        try {
            return Response.ok(doctorBoarMonthlyReportDao.update(doctorBoarMonthlyReport));
        } catch (Exception e) {
            log.error("update doctorBoarMonthlyReport failed, doctorBoarMonthlyReport:{}, cause:{}", doctorBoarMonthlyReport, Throwables.getStackTraceAsString(e));
            return Response.fail("doctorBoarMonthlyReport.update.fail");
        }
    }

    @Override
    public Response<Boolean> deleteDoctorBoarMonthlyReportById(Long doctorBoarMonthlyReportId) {
        try {
            return Response.ok(doctorBoarMonthlyReportDao.delete(doctorBoarMonthlyReportId));
        } catch (Exception e) {
            log.error("delete doctorBoarMonthlyReport failed, doctorBoarMonthlyReportId:{}, cause:{}", doctorBoarMonthlyReportId, Throwables.getStackTraceAsString(e));
            return Response.fail("doctorBoarMonthlyReport.delete.fail");
        }
    }

    @Override
    public Response<Boolean> createMonthlyReports(List<Long> farmIds, Date sumAt) {
        try {
            log.info("create boar monthly report start: {}", sumAt);
            Date startAt = new DateTime(sumAt).withDayOfMonth(1).withTimeAtStartOfDay().toDate(); //月初: 2016-08-01 00:00:00
            Date endAt = new DateTime(Dates.endOfDay(sumAt)).plusSeconds(-1).toDate();            //天末: 2016-08-12 23:59:59
            farmIds.stream().forEach(farmId -> getBoarMonthlyReport(farmId, startAt, endAt, sumAt));
            return Response.ok(Boolean.TRUE);
        } catch (Exception e) {
            log.error("create monthly reports failed, sumAt:{}, cause:{}", sumAt, Throwables.getStackTraceAsString(e));
            return Response.fail("monthlyReport.create.fail");
        }
    }

    @Override
    public Response<Boolean> createMonthlyReport(Long farmId, Date sumAt) {
        try {
            log.info("create boar monthly report start: {}", sumAt);
            Date startAt = new DateTime(sumAt).withDayOfMonth(1).withTimeAtStartOfDay().toDate(); //月初: 2016-08-01 00:00:00
            Date endAt = new DateTime(Dates.endOfDay(sumAt)).plusSeconds(-1).toDate();            //天末: 2016-08-12 23:59:59
            getBoarMonthlyReport(farmId, startAt, endAt, sumAt);
            return Response.ok(Boolean.TRUE);
        } catch (Exception e) {
            log.error("create monthly report failed, sumAt:{}, cause:{}", sumAt, Throwables.getStackTraceAsString(e));
            return Response.fail("monthlyReport.create.fail");
        }
    }

    //公猪月报
    private void getBoarMonthlyReport(Long farmId, Date startAt, Date endAt, Date sumAt) {
        DoctorBoarMonthlyReport report = new DoctorBoarMonthlyReport();
        List<DoctorBoarMonthlyReport> doctorBoarMonthlyReportLists =  doctorBoarMonthlyReportDao.constructorDoctorBoarMonthlyReports(farmId, startAt, endAt);
        if(  doctorBoarMonthlyReportLists != null && !doctorBoarMonthlyReportLists.isEmpty()){
            doctorBoarMonthlyReportManager.createMonthlyReports(doctorBoarMonthlyReportLists, new DateTime(sumAt).toString(DateUtil.YYYYMM));
        }

    }

}
