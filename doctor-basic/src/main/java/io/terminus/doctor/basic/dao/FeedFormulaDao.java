package io.terminus.doctor.basic.dao;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import io.terminus.common.model.Paging;
import io.terminus.common.mysql.dao.MyBatisDao;
import io.terminus.common.utils.JsonMapper;
import io.terminus.doctor.basic.model.FeedFormula;
import org.springframework.stereotype.Repository;

import java.util.Collections;
import java.util.List;
import java.util.Map;

/**
 * Code generated by terminus code gen
 * Desc: 饲料配方表Dao类, 配方生产的都是饲料, 消耗原料和药品
 * Date: 2016-09-26
 */
@Repository
public class FeedFormulaDao extends MyBatisDao<FeedFormula> {

    /**
     * 配方列表按照创建时间由近及远排列
     * @param offset
     * @param limit
     * @param criteria
     * @return
     */
    public Paging<FeedFormula> pagingFormulaList(Integer offset, Integer limit, FeedFormula criteria) {
        Map<String, Object> params = Maps.newHashMap();
        if (criteria != null) {
            Map<String, Object> objMap = (Map) JsonMapper.nonDefaultMapper().getMapper().convertValue(criteria, Map.class);
            params.putAll(objMap);
        }

        Long total = (Long)this.sqlSession.selectOne(this.sqlId("count"), criteria);
        if (total.longValue() <= 0L) {
            return new Paging(0L, Collections.emptyList());
        } else {
            params.put("offset", offset);
            params.put("limit", limit);
            List<FeedFormula> datas = this.sqlSession.selectList(this.sqlId("formulaListPaging"), params);
            return new Paging(total, datas);
        }
    }

    /**
     * 查询配方
     * @param feedId 饲料(即物料)的id
     * @param farmId
     * @return
     */
    public FeedFormula findByFeedIdAndFarmId(Long feedId, Long farmId){
        return sqlSession.selectOne(sqlId("findByFeedIdAndFarmId"), ImmutableMap.of("feedId", feedId, "farmId", farmId));
    }
}
