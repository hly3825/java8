package io.terminus.doctor.basic.service;

import com.google.common.base.Strings;
import com.google.common.base.Throwables;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.PageInfo;
import io.terminus.common.model.Paging;
import io.terminus.common.model.Response;
import io.terminus.doctor.basic.dao.FeedFormulaDao;
import io.terminus.doctor.basic.model.FeedFormula;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Code generated by terminus code gen
 * Desc: 饲料配方表读服务实现类
 * Date: 2016-09-26
 */
@Slf4j
@Service
@RpcProvider
public class FeedFormulaReadServiceImpl implements FeedFormulaReadService {

    private final FeedFormulaDao feedFormulaDao;

    @Autowired
    public FeedFormulaReadServiceImpl(FeedFormulaDao feedFormulaDao) {
        this.feedFormulaDao = feedFormulaDao;
    }

    @Override
    public Response<FeedFormula> findFeedFormulaById(Long feedFormulaId) {
        try {
            return Response.ok(feedFormulaDao.findById(feedFormulaId));
        } catch (Exception e) {
            log.error("find feedFormula by id failed, feedFormulaId:{}, cause:{}", feedFormulaId, Throwables.getStackTraceAsString(e));
            return Response.fail("feedFormula.find.fail");
        }
    }

    @Override
    public Response<FeedFormula> findFeedFormulaById(Long feedId, Long farmId) {
        try {
            return Response.ok(feedFormulaDao.findByFeedIdAndFarmId(feedId, farmId));
        } catch (Exception e) {
            log.error("find feedFormula failed, feedId:{}, farmId:{}, cause:{}", feedId, farmId, Throwables.getStackTraceAsString(e));
            return Response.fail("feedFormula.find.fail");
        }
    }

    /**
     * 配方列表按照创建时间由近及远排列
     * @param formulaName
     * @param feedName
     * @param pageNo
     * @param pageSize
     * @return
     */
    @Override
    public Response<Paging<FeedFormula>> pagingFormulaList(Long farmId,String formulaName, String feedName, Integer pageNo, Integer pageSize) {
        try {
            FeedFormula criteria = FeedFormula.builder()
                    .feedName(feedName).formulaName(formulaName).farmId(farmId).build();
            PageInfo pageInfo = new PageInfo(pageNo, pageSize);
            return Response.ok(feedFormulaDao.pagingFormulaList(pageInfo.getOffset(), pageInfo.getLimit(), criteria));
        } catch (Exception e) {
            log.error("paging feedFormula failed, formulaName:{}, feedName:{}, cause:{}",
                    formulaName,feedName, Throwables.getStackTraceAsString(e));
            return Response.fail("feedFormula.find.fail");
        }
    }

    public Response<Paging<FeedFormula>> paging(Long feedId, Long farmId, String feedName, Integer pageNo, Integer size){
        try {
            FeedFormula criteria = FeedFormula.builder()
                    .feedId(feedId).feedName(Strings.emptyToNull(feedName)).farmId(farmId)
                    .build();
            PageInfo pageInfo = new PageInfo(pageNo, size);
            return Response.ok(feedFormulaDao.paging(pageInfo.getOffset(), pageInfo.getLimit(), criteria));
        } catch (Exception e) {
            log.error("paging feedFormula failed, feedId:{}, farmId:{}, feedName:{}, cause:{}",
                    feedId, farmId, feedName, Throwables.getStackTraceAsString(e));
            return Response.fail("feedFormula.find.fail");
        }
    }
}
