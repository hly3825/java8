<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (c) 2016 杭州端点网络科技有限公司, Code Generated by terminus code gen
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="DoctorBasicMaterial">
    <resultMap id="DoctorBasicMaterialMap" type="DoctorBasicMaterial">
        <result column="type" property="type"/>
        <result column="sub_type" property="subType"/>
        <result column="name" property="name"/>
        <result column="srm" property="srm"/>
        <result column="is_valid" property="isValid"/>
        <result column="unit_group_id" property="unitGroupId"/>
        <result column="unit_group_name" property="unitGroupName"/>
        <result column="unit_id" property="unitId"/>
        <result column="unit_name" property="unitName"/>
        <result column="default_consume_count" property="defaultConsumeCount"/>
        <result column="price" property="price"/>
        <result column="remark" property="remark"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        
    </resultMap>

    <sql id="tb">
        doctor_basic_materials
    </sql>

    <sql id="cols_all">
        id, <include refid="cols_exclude_id" />
    </sql>

    <sql id="cols_exclude_id">
        type, sub_type, name, srm, is_valid, unit_group_id, unit_group_name, unit_id, unit_name, default_consume_count, price, remark, created_at, updated_at
    </sql>

    <sql id="vals">
        #{type}, #{subType}, #{name}, #{srm}, #{isValid}, #{unitGroupId}, #{unitGroupName}, #{unitId}, #{unitName}, #{defaultConsumeCount}, #{price}, #{remark}, now(), now()
    </sql>

    <sql id="criteria">
        <if test="type != null">AND `type` = #{type}</if>
        <if test="ids != null and ids.size() > 0">
            AND
            <foreach collection="ids" item="id" open="(" separator="or" close=")">
                id =#{id}
            </foreach>
        </if>
        <if test="subType != null">AND `sub_type` = #{subType}</if>
        <if test="name != null">AND `name` like concat('%', #{name}, '%')</if>
        <if test="srm != null">AND srm like concat('%', #{srm}, '%')</if>
        <if test="unitGroupId != null">AND unit_group_id = #{unitGroupId}</if>
        <if test="unitGroupName != null">AND unit_group_name = #{unitGroupName}</if>
        <if test="unitId != null">AND unit_id = #{unitId}</if>
        <if test="unitName != null">AND unit_name = #{unitName}</if>
        <if test="defaultConsumeCount != null">AND default_consume_count = #{defaultConsumeCount}</if>
        <if test="price != null">AND price = #{price}</if>
        <if test="isValid != null">AND is_valid = #{isValid}</if>
    </sql>

    <insert id="create" parameterType="DoctorBasicMaterial" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO
        <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        (<include refid="vals" />)
    </insert>

    <select id="findById" parameterType="long" resultMap="DoctorBasicMaterialMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        WHERE id = #{id}
    </select>

    <select id="findByType" parameterType="int" resultMap="DoctorBasicMaterialMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        where is_valid = 1
        <if test="type != null"> and type = #{type}</if>
    </select>

    <select id="findByTypeAndName" parameterType="map" resultMap="DoctorBasicMaterialMap" >
        SELECT <include refid="cols_all" />
        FROM <include refid="tb" />
        where `type` = #{type} and `name` = #{name}
    </select>

    <update id="update" parameterType="DoctorBasicMaterial">
        UPDATE
        <include refid="tb"/>
        <set>
            <if test="type != null">type = #{type},</if>
            <if test="subType != null">sub_type = #{subType},</if>
            <if test="name != null">name = #{name},</if>
            <if test="srm != null">srm = #{srm},</if>
            <if test="isValid != null">is_valid = #{isValid},</if>
            <if test="unitGroupId != null">unit_group_id = #{unitGroupId},</if>
            <if test="unitGroupName != null">unit_group_name = #{unitGroupName},</if>
            <if test="unitId != null">unit_id = #{unitId},</if>
            <if test="unitName != null">unit_name = #{unitName},</if>
            <if test="defaultConsumeCount != null">default_consume_count = #{defaultConsumeCount},</if>
            <if test="price != null">price = #{price},</if>
            <if test="remark != null">remark = #{remark},</if>
            updated_at=now()
        </set>
        WHERE id = #{id}
    </update>

    <delete id="delete" parameterType="long">
        DELETE FROM <include refid="tb"/>
        WHERE id = #{id}
    </delete>

    <select id="count" parameterType="map" resultType="long">
        SELECT count(id) from <include refid="tb"/>
        where is_valid = 1
        <include refid="criteria"/>
    </select>

    <select id="paging" parameterType="map" resultMap="DoctorBasicMaterialMap">
        SELECT <include refid="cols_all"/> from <include refid="tb"/>
        where is_valid = 1
        <include refid="criteria"/>
        ORDER BY updated_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- search api start -->
    <select id="maxId" resultType="long">
        SELECT MAX(id) FROM
        <include refid="tb"/>
    </select>

    <select id="listSince" resultMap="DoctorBasicMaterialMap">
        SELECT
        <include refid="cols_all"/>
        FROM
        <include refid="tb"/>
        WHERE  <![CDATA[
          id < #{lastId} AND updated_at > #{since}
        ]]>
        and is_valid = 1
        ORDER BY id DESC LIMIT #{limit}
    </select>
    <!-- search api end -->

    <select id="list" parameterType="map" resultMap="DoctorBasicMaterialMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
        <if test="nameSort">
            ORDER BY CONVERT(name USING gbk)
        </if>
    </select>

    <select id="findByIdsAndType" parameterType="map" resultMap="DoctorBasicMaterialMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <if test="type != null">AND `type` = #{type}</if>
            <if test="ids != null">
                AND id in
                <foreach collection="ids" open="(" separator="," close=")" item="id">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>

    <select id="findByIds" parameterType="list" resultMap="DoctorBasicMaterialMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <if test="list != null and list.size()>0">
                AND id in
                <foreach item="id" collection="list" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>
</mapper>