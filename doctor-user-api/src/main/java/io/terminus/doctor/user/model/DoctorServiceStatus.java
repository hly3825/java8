package io.terminus.doctor.user.model;

import com.google.common.base.Objects;
import com.google.common.collect.Lists;
import io.terminus.common.exception.ServiceException;
import lombok.Data;
import lombok.Getter;

import java.io.Serializable;
import java.util.Date;

/**
 * Code generated by terminus code gen
 * Desc: 用户服务状态表Model类
 * Date: 2016-06-03
 */
@Data
public class DoctorServiceStatus implements Serializable {
    private static final long serialVersionUID = -5197463213695970480L;

    private Long id;

    private Long userId;

    /**
     * 猪场软件服务状态，1-开通，0-关闭
     */
    private Integer pigdoctorStatus;

    /**
     * 冗余，猪场软件审批不通过或被冻结申请资格的原因
     */
    private String pigdoctorReason;

    /**
     * 冗余，猪场软件服务的审批状态
     */
    private Integer pigdoctorReviewStatus;

    /**
     * 电商服务状态，1-开通，0-关闭
     */
    private Integer pigmallStatus;

    /**
     * 冗余，电商服务审批不通过或被冻结申请资格的原因
     */
    private String pigmallReason;

    /**
     * 冗余，电商服务的审批状态
     */
    private Integer pigmallReviewStatus;

    /**
     * 大数据服务状态，1-开通，0-关闭
     */
    private Integer neverestStatus;

    /**
     * 冗余，大数据服务审批不通过或被冻结申请资格的原因
     */
    private String neverestReason;

    /**
     * 冗余，大数据服务的审批状态
     */
    private Integer neverestReviewStatus;

    /**
     * 生猪交易服务状态，1-开通，0-关闭
     */
    private Integer pigtradeStatus;

    /**
     * 冗余，生猪交易审批不通过或被冻结申请资格的原因
     */
    private String pigtradeReason;

    /**
     * 冗余，生猪交易服务的审批状态
     */
    private Integer pigtradeReviewStatus;

    private Date createdAt;

    private Date updatedAt;

    /**
     * 服务状态
     */
    public enum Status {
        OPENED(1, "已开通"),
        CLOSED(0, "未开通"),
        BETA(-1, "服务内测中");

        private int value;
        private String desc;

        Status(int value, String desc) {
            this.value = value;
            this.desc = desc;
        }

        public static Status from(int number) {
            return Lists.newArrayList(Status.values()).stream()
                    .filter(s -> Objects.equal(s.value, number))
                    .findFirst()
                    .<ServiceException>orElseThrow(() -> {
                        throw new ServiceException("doctor.service.status.error");
                    });
        }

        public int value(){
            return this.value;
        }
        public String toString(){
            return this.desc;
        }
    }
}
