package io.terminus.doctor.event.model;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.terminus.common.utils.JsonMapper;
import io.terminus.doctor.event.dto.msg.Rule;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.SneakyThrows;
import lombok.experimental.Builder;
import org.apache.commons.lang3.StringUtils;

import java.io.Serializable;
import java.util.Date;

/**
 * Code generated by terminus code gen
 * Desc: 猪场软件消息规则表Model类
 * Date: 2016-05-31
 * author: chk@terminus.io
 */
@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class DoctorMessageRule implements Serializable {

    private static final long serialVersionUID = -4671720291853145589L;
    private static final ObjectMapper OBJECT_MAPPER = JsonMapper.JSON_NON_EMPTY_MAPPER.getMapper();

    /**
     * 自增主键
     */
    private Long id;

    /**
     * 猪场id
     */
    private Long farmId;

    /**
     * 消息规则模板id
     */
    private Long templateId;

    /**
     * 消息规则模板名称
     */
    private String templateName;

    /**
     * 消息类型: 0->系统消息, 1->预警消息, 2->警报消息
     */
    private Integer type;

    /**
     * 消息种类
     */
    private Integer category;

    /**
     * 规则值, 是role对应表的默认值, json值
     */
    private String ruleValue;

    /**
     * 是否使用默认配置, 0:不使用, 1:使用
     */
    private Integer useDefault;

    /**
     * 状态 1:正常, -1:删除, -2:禁用
     */
    private Integer status;

    /**
     * 消息规则模板描述
     */
    private String describe;

    /**
     * 创建时间
     */
    private Date createdAt;

    /**
     * 更新时间
     */
    private Date updatedAt;

    /**
     * 获取规则值的对象类型
     */
    @SneakyThrows
    public Rule getRule() {
        if (StringUtils.isNotBlank(this.ruleValue)) {
            return OBJECT_MAPPER.readValue(this.ruleValue, new TypeReference<Rule>() {});
        }
        return null;
    }

    /**
     * 状态枚举值
     */
    public enum Status {
        NORMAL(1, "正常"),
        DELETE(-1, "删除"),
        DISABLE(-2, "禁用");

        @Getter
        private Integer value;

        @Getter
        private String describe;

        Status(Integer value, String describe) {
            this.value = value;
            this.describe = describe;
        }
    }
}
